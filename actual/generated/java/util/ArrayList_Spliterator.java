// Generated by the LibSL translator.  DO NOT EDIT!
// source: ?
//
package generated.java.util;

import java.util.Comparator;
import java.util.Spliterator;
import java.util.function.Consumer;
import org.jacodb.approximation.annotation.Approximate;
import org.usvm.api.Engine;
import runtime.LibSLRuntime;

/**
 * ArrayListSpliteratorAutomaton for ArrayListSpliterator ~> java.util.ArrayList_Spliterator
 */
@Approximate(java.util.ArrayList_Spliterator.class)
public final class ArrayList_Spliterator implements LibSLRuntime.Automaton, Spliterator {
    public LibSLRuntime.Token __$lsl_token = null;

    public byte __$lsl_state = __$lsl_States.Allocated;

    public ArrayList parent;

    public int index;

    public int fence;

    public int expectedModCount;

    @LibSLRuntime.AutomatonConstructor
    public ArrayList_Spliterator(final LibSLRuntime.Token __$lsl_token, final byte __$lsl_state,
            final ArrayList parent, final int index, final int fence, final int expectedModCount) {
        this.__$lsl_token = __$lsl_token;
        this.__$lsl_state = __$lsl_state;
        this.parent = parent;
        this.index = index;
        this.fence = fence;
        this.expectedModCount = expectedModCount;
    }

    @LibSLRuntime.AutomatonConstructor
    public ArrayList_Spliterator(final LibSLRuntime.Token __$lsl_token) {
        this(__$lsl_token, __$lsl_States.Allocated, null, 0, 0, 0);
    }

    /**
     * [CONSTRUCTOR] ArrayListSpliteratorAutomaton::ArrayListSpliterator(ArrayListSpliterator, ArrayList, int, int, int) -> ArrayListSpliterator
     */
    private ArrayList_Spliterator(ArrayList _this, int origin, int fence, int expectedModCount) {
        this(LibSLRuntime.Token.INSTANCE);
        Engine.assume(this.__$lsl_state == __$lsl_States.Allocated);
        /* body */ {
            LibSLRuntime.not_implemented(/* private constructor call */);
        }
        this.__$lsl_state = __$lsl_States.Initialized;
    }

    /**
     * [FUNCTION] ArrayListSpliteratorAutomaton::characteristics(ArrayListSpliterator) -> int
     */
    public int characteristics() {
        int result = 0;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayListSpliteratorAutomaton::equals(ArrayListSpliterator, Object) -> boolean
     */
    public boolean equals(Object obj) {
        boolean result = false;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.not_implemented(/* no final decision */);
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayListSpliteratorAutomaton::estimateSize(ArrayListSpliterator) -> long
     */
    public long estimateSize() {
        long result = 0L;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayListSpliteratorAutomaton::forEachRemaining(ArrayListSpliterator, Consumer) -> void
     */
    public void forEachRemaining(Consumer _action) {
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
    }

    /**
     * [FUNCTION] ArrayListSpliteratorAutomaton::getComparator(ArrayListSpliterator) -> Comparator
     */
    public Comparator getComparator() {
        Comparator result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayListSpliteratorAutomaton::getExactSizeIfKnown(ArrayListSpliterator) -> long
     */
    public long getExactSizeIfKnown() {
        long result = 0L;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayListSpliteratorAutomaton::hasCharacteristics(ArrayListSpliterator, int) -> boolean
     */
    public boolean hasCharacteristics(int characteristics) {
        boolean result = false;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayListSpliteratorAutomaton::hashCode(ArrayListSpliterator) -> int
     */
    public int hashCode() {
        int result = 0;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.not_implemented(/* no final decision */);
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayListSpliteratorAutomaton::toString(ArrayListSpliterator) -> String
     */
    public String toString() {
        String result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.not_implemented(/* no final decision */);
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayListSpliteratorAutomaton::tryAdvance(ArrayListSpliterator, Consumer) -> boolean
     */
    public boolean tryAdvance(Consumer _action) {
        boolean result = false;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayListSpliteratorAutomaton::trySplit(ArrayListSpliterator) -> ArrayListSpliterator
     */
    public ArrayList_Spliterator trySplit() {
        ArrayList_Spliterator result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    public static final class __$lsl_States {
        public static final byte Allocated = (byte) 0;

        public static final byte Initialized = (byte) 1;
    }

    @Approximate(ArrayList_Spliterator.class)
    public static final class __hook {
        private __hook(Void o) {
            Engine.assume(false);
        }
    }
}
