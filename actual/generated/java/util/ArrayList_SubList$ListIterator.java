// Generated by the LibSL translator.  DO NOT EDIT!
// source: ?
//
package generated.java.util;

import java.util.ConcurrentModificationException;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.jacodb.approximation.annotation.Approximate;
import org.usvm.api.Engine;
import org.usvm.api.SymbolicList;
import runtime.LibSLRuntime;

/**
 * ArrayList_SubList_ListIteratorAutomaton for ArrayList_SubList_ListIterator ~> java.util.ArrayList_SubList$ListIterator
 */
@Approximate(stub.java.util.ArrayList_SubList$ListIterator.class)
public final class ArrayList_SubList$ListIterator implements LibSLRuntime.Automaton, ListIterator {
    static {
    }

    public ArrayList root;

    public ArrayList_SubList sublist;

    public int cursor;

    public int expectedModCount;

    public int offset;

    public int size;

    public int lastRet = -1;

    @LibSLRuntime.AutomatonConstructor
    public ArrayList_SubList$ListIterator(Void __$lsl_token, final byte p0, final ArrayList p1,
            final ArrayList_SubList p2, final int p3, final int p4, final int p5, final int p6,
            final int p7) {
        this.root = p1;
        this.sublist = p2;
        this.cursor = p3;
        this.expectedModCount = p4;
        this.offset = p5;
        this.size = p6;
        this.lastRet = p7;
    }

    @LibSLRuntime.AutomatonConstructor
    public ArrayList_SubList$ListIterator(final Void __$lsl_token) {
        this(__$lsl_token, __$lsl_States.Initialized, null, null, 0, 0, 0, 0, -1);
    }

    /**
     * [SUBROUTINE] ArrayList_SubList_ListIteratorAutomaton::_checkForComodification() -> void
     */
    private void _checkForComodification() {
        /* body */ {
            final int modCount = ((ArrayList) root).modCount;
            if (modCount != expectedModCount) {
                throw new ConcurrentModificationException();
            }
        }
    }

    /**
     * [FUNCTION] ArrayList_SubList_ListIteratorAutomaton::hasPrevious(ArrayList_SubList_ListIterator) -> boolean
     */
    public boolean hasPrevious() {
        boolean result = false;
        /* body */ {
            result = cursor != 0;
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_SubList_ListIteratorAutomaton::nextIndex(ArrayList_SubList_ListIterator) -> int
     */
    public int nextIndex() {
        int result = 0;
        /* body */ {
            result = cursor;
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_SubList_ListIteratorAutomaton::previousIndex(ArrayList_SubList_ListIterator) -> int
     */
    public int previousIndex() {
        int result = 0;
        /* body */ {
            result = cursor - 1;
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_SubList_ListIteratorAutomaton::hasNext(ArrayList_SubList_ListIterator) -> boolean
     */
    public boolean hasNext() {
        boolean result = false;
        /* body */ {
            result = cursor != size;
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_SubList_ListIteratorAutomaton::next(ArrayList_SubList_ListIterator) -> Object
     */
    public Object next() {
        Object result = null;
        /* body */ {
            Engine.assume(root != null);
            _checkForComodification();
            final int i = offset + cursor;
            if (i >= ((ArrayList) root).length) {
                throw new NoSuchElementException();
            }
            final SymbolicList<Object> rootStorage = ((ArrayList) root).storage;
            if (i >= rootStorage.size()) {
                throw new ConcurrentModificationException();
            }
            lastRet = cursor;
            cursor += 1;
            result = rootStorage.get(i);
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_SubList_ListIteratorAutomaton::previous(ArrayList_SubList_ListIterator) -> Object
     */
    public Object previous() {
        Object result = null;
        /* body */ {
            Engine.assume(root != null);
            _checkForComodification();
            final int i = (offset + cursor) - 1;
            if (i < offset) {
                throw new NoSuchElementException();
            }
            final SymbolicList<Object> rootStorage = ((ArrayList) root).storage;
            if (i >= rootStorage.size()) {
                throw new ConcurrentModificationException();
            }
            cursor -= 1;
            lastRet = cursor;
            result = rootStorage.get(i);
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_SubList_ListIteratorAutomaton::remove(ArrayList_SubList_ListIterator) -> void
     */
    public void remove() {
        /* body */ {
            Engine.assume(root != null);
            if (lastRet < 0) {
                throw new IllegalStateException();
            }
            _checkForComodification();
            if (lastRet >= size) {
                throw new ConcurrentModificationException();
            } else {
                ((ArrayList) root)._deleteElement(offset + lastRet);
                ((ArrayList_SubList) sublist)._updateSizeAndModCount(-1);
                expectedModCount = ((ArrayList) root).modCount;
                size -= 1;
            }
            cursor = lastRet;
            lastRet = -1;
        }
    }

    /**
     * [FUNCTION] ArrayList_SubList_ListIteratorAutomaton::set(ArrayList_SubList_ListIterator, Object) -> void
     */
    public void set(Object e) {
        /* body */ {
            Engine.assume(root != null);
            if (lastRet < 0) {
                throw new IllegalStateException();
            }
            _checkForComodification();
            final int index = offset + lastRet;
            if (index >= ((ArrayList) root).length) {
                throw new ConcurrentModificationException();
            } else {
                ((ArrayList) root).storage.set(index, e);
            }
        }
    }

    /**
     * [FUNCTION] ArrayList_SubList_ListIteratorAutomaton::add(ArrayList_SubList_ListIterator, Object) -> void
     */
    public void add(Object e) {
        /* body */ {
            Engine.assume(root != null);
            _checkForComodification();
            final int i = offset + cursor;
            if ((offset + lastRet) > ((ArrayList) root).length) {
                throw new ConcurrentModificationException();
            } else {
                ((ArrayList) root)._addElement(i, e);
                ((ArrayList_SubList) sublist)._updateSizeAndModCount(1);
                expectedModCount = ((ArrayList) root).modCount;
                size += 1;
            }
            cursor += 1;
            lastRet = -1;
        }
    }

    /**
     * [FUNCTION] ArrayList_SubList_ListIteratorAutomaton::forEachRemaining(ArrayList_SubList_ListIterator, Consumer) -> void
     */
    public void forEachRemaining(Consumer userAction) {
        /* body */ {
            Engine.assume(root != null);
            if (userAction == null) {
                throw new NullPointerException();
            }
            int i = cursor;
            if (i < size) {
                i += offset;
                final SymbolicList<Object> es = ((ArrayList) root).storage;
                if (i >= es.size()) {
                    throw new ConcurrentModificationException();
                }
                final int end = offset + size;
                for (i = i; i < end; i += 1) {
                    final Object item = es.get(i);
                    userAction.accept(item);
                }
                ;
                cursor = i - offset;
                lastRet = cursor - 1;
                _checkForComodification();
            }
        }
    }

    public static final class __$lsl_States {
        public static final byte Initialized = (byte) 0;
    }

    @Approximate(ArrayList_SubList$ListIterator.class)
    public static final class __hook {
        private __hook(Void o1, Void o2) {
            Engine.assume(false);
        }
    }
}
