// Generated by the LibSL translator.  DO NOT EDIT!
// sources:
//  - java/util/Spliterators.lsl:19
//  - java/util/Spliterators.main.lsl:21
//
package generated.java.util;

import generated.runtime.LibSLGlobals;
import java.lang.Object;
import java.lang.SuppressWarnings;
import java.lang.Void;
import java.util.Spliterator;
import org.jacodb.approximation.annotation.Approximate;
import org.usvm.api.Engine;
import runtime.LibSLRuntime;

/**
 * SpliteratorsAutomaton for Spliterators ~> java.util.Spliterators
 */
@SuppressWarnings({"all", "unchecked"})
@Approximate(java.util.Spliterators.class)
public final class Spliterators implements LibSLRuntime.Automaton {
    static {
        Engine.assume(true);
    }

    @LibSLRuntime.AutomatonConstructor
    public Spliterators(Void __$lsl_token, final byte p0) {
    }

    @LibSLRuntime.AutomatonConstructor
    public Spliterators(final Void __$lsl_token) {
        this(__$lsl_token, __$lsl_States.Allocated);
    }

    /**
     * [CONSTRUCTOR] SpliteratorsAutomaton::init(Spliterators) -> Spliterators
     * Source: java/util/Spliterators.main.lsl:68
     */
    private Spliterators() {
        this((Void) null);
        /* body */ {
        }
    }

    /**
     * [FUNCTION] SpliteratorsAutomaton::spliterator(array<Object>, int) -> Spliterator
     * Source: java/util/Spliterators.main.lsl:146
     */
    public static Spliterator spliterator(Object[] arr, int additionalCharacteristics) {
        Spliterator result = null;
        /* body */ {
            result = (stub.java.util.Spliterators_ArraySpliterator) ((Object) new Spliterators_ArraySpliterator((Void) null, 
                /* state = */ Spliterators_ArraySpliterator.__$lsl_States.Initialized, 
                /* array = */ arr, 
                /* index = */ 0, 
                /* fence = */ arr.length, 
                /* characteristics = */ additionalCharacteristics | LibSLGlobals.SPLITERATOR_SIZED | LibSLGlobals.SPLITERATOR_SUBSIZED
            ));
        }
        return result;
    }

    /**
     * [FUNCTION] SpliteratorsAutomaton::spliterator(array<Object>, int, int, int) -> Spliterator
     * Source: java/util/Spliterators.main.lsl:157
     */
    public static Spliterator spliterator(Object[] arr, int fromIndex, int toIndex,
            int additionalCharacteristics) {
        Spliterator result = null;
        /* body */ {
            result = (stub.java.util.Spliterators_ArraySpliterator) ((Object) new Spliterators_ArraySpliterator((Void) null, 
                /* state = */ Spliterators_ArraySpliterator.__$lsl_States.Initialized, 
                /* array = */ arr, 
                /* index = */ fromIndex, 
                /* fence = */ toIndex, 
                /* characteristics = */ additionalCharacteristics | LibSLGlobals.SPLITERATOR_SIZED | LibSLGlobals.SPLITERATOR_SUBSIZED
            ));
        }
        return result;
    }

    /**
     * [FUNCTION] SpliteratorsAutomaton::spliterator(array<double>, int) -> Spliterator_OfDouble
     * Source: java/util/Spliterators.main.lsl:189
     */
    public static Spliterator.OfDouble spliterator(double[] arr, int additionalCharacteristics) {
        Spliterator.OfDouble result = null;
        /* body */ {
            result = (stub.java.util.Spliterators_DoubleArraySpliterator) ((Object) new Spliterators_DoubleArraySpliterator((Void) null, 
                /* state = */ Spliterators_DoubleArraySpliterator.__$lsl_States.Initialized, 
                /* array = */ arr, 
                /* index = */ 0, 
                /* fence = */ arr.length, 
                /* characteristics = */ additionalCharacteristics | LibSLGlobals.SPLITERATOR_SIZED | LibSLGlobals.SPLITERATOR_SUBSIZED
            ));
        }
        return result;
    }

    /**
     * [FUNCTION] SpliteratorsAutomaton::spliterator(array<double>, int, int, int) -> Spliterator_OfDouble
     * Source: java/util/Spliterators.main.lsl:200
     */
    public static Spliterator.OfDouble spliterator(double[] arr, int fromIndex, int toIndex,
            int additionalCharacteristics) {
        Spliterator.OfDouble result = null;
        /* body */ {
            result = (stub.java.util.Spliterators_DoubleArraySpliterator) ((Object) new Spliterators_DoubleArraySpliterator((Void) null, 
                /* state = */ Spliterators_DoubleArraySpliterator.__$lsl_States.Initialized, 
                /* array = */ arr, 
                /* index = */ fromIndex, 
                /* fence = */ toIndex, 
                /* characteristics = */ additionalCharacteristics | LibSLGlobals.SPLITERATOR_SIZED | LibSLGlobals.SPLITERATOR_SUBSIZED
            ));
        }
        return result;
    }

    /**
     * [FUNCTION] SpliteratorsAutomaton::spliterator(array<int>, int) -> Spliterator_OfInt
     * Source: java/util/Spliterators.main.lsl:211
     */
    public static Spliterator.OfInt spliterator(int[] arr, int additionalCharacteristics) {
        Spliterator.OfInt result = null;
        /* body */ {
            result = (stub.java.util.Spliterators_IntArraySpliterator) ((Object) new Spliterators_IntArraySpliterator((Void) null, 
                /* state = */ Spliterators_IntArraySpliterator.__$lsl_States.Initialized, 
                /* array = */ arr, 
                /* index = */ 0, 
                /* fence = */ arr.length, 
                /* characteristics = */ additionalCharacteristics | LibSLGlobals.SPLITERATOR_SIZED | LibSLGlobals.SPLITERATOR_SUBSIZED
            ));
        }
        return result;
    }

    /**
     * [FUNCTION] SpliteratorsAutomaton::spliterator(array<int>, int, int, int) -> Spliterator_OfInt
     * Source: java/util/Spliterators.main.lsl:222
     */
    public static Spliterator.OfInt spliterator(int[] arr, int fromIndex, int toIndex,
            int additionalCharacteristics) {
        Spliterator.OfInt result = null;
        /* body */ {
            result = (stub.java.util.Spliterators_IntArraySpliterator) ((Object) new Spliterators_IntArraySpliterator((Void) null, 
                /* state = */ Spliterators_IntArraySpliterator.__$lsl_States.Initialized, 
                /* array = */ arr, 
                /* index = */ fromIndex, 
                /* fence = */ toIndex, 
                /* characteristics = */ additionalCharacteristics | LibSLGlobals.SPLITERATOR_SIZED | LibSLGlobals.SPLITERATOR_SUBSIZED
            ));
        }
        return result;
    }

    /**
     * [FUNCTION] SpliteratorsAutomaton::spliterator(array<long>, int) -> Spliterator_OfLong
     * Source: java/util/Spliterators.main.lsl:233
     */
    public static Spliterator.OfLong spliterator(long[] arr, int additionalCharacteristics) {
        Spliterator.OfLong result = null;
        /* body */ {
            result = (stub.java.util.Spliterators_LongArraySpliterator) ((Object) new Spliterators_LongArraySpliterator((Void) null, 
                /* state = */ Spliterators_LongArraySpliterator.__$lsl_States.Initialized, 
                /* array = */ arr, 
                /* index = */ 0, 
                /* fence = */ arr.length, 
                /* characteristics = */ additionalCharacteristics | LibSLGlobals.SPLITERATOR_SIZED | LibSLGlobals.SPLITERATOR_SUBSIZED
            ));
        }
        return result;
    }

    /**
     * [FUNCTION] SpliteratorsAutomaton::spliterator(array<long>, int, int, int) -> Spliterator_OfLong
     * Source: java/util/Spliterators.main.lsl:244
     */
    public static Spliterator.OfLong spliterator(long[] arr, int fromIndex, int toIndex,
            int additionalCharacteristics) {
        Spliterator.OfLong result = null;
        /* body */ {
            result = (stub.java.util.Spliterators_LongArraySpliterator) ((Object) new Spliterators_LongArraySpliterator((Void) null, 
                /* state = */ Spliterators_LongArraySpliterator.__$lsl_States.Initialized, 
                /* array = */ arr, 
                /* index = */ fromIndex, 
                /* fence = */ toIndex, 
                /* characteristics = */ additionalCharacteristics | LibSLGlobals.SPLITERATOR_SIZED | LibSLGlobals.SPLITERATOR_SUBSIZED
            ));
        }
        return result;
    }

    public static final class __$lsl_States {
        public static final byte Allocated = (byte) 0;
    }

    @Approximate(Spliterators.class)
    public static final class __hook {
        private __hook(Void o1, Void o2) {
            Engine.assume(false);
        }
    }
}
