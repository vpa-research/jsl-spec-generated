// Generated by the LibSL translator.  DO NOT EDIT!
// sources:
//  - java/util/Random.lsl:17
//  - java/util/Random.main.lsl:21
//
package generated.java.util;

import generated.runtime.LibSLGlobals;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamField;
import java.io.Serializable;
import java.lang.IllegalArgumentException;
import java.lang.Object;
import java.lang.SuppressWarnings;
import java.lang.Void;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.jacodb.approximation.annotation.Approximate;
import org.usvm.api.Engine;
import runtime.LibSLRuntime;
import stub.java.util.stream.DoubleStreamLSL;
import stub.java.util.stream.IntStreamLSL;
import stub.java.util.stream.LongStreamLSL;

/**
 * RandomAutomaton for Random ~> java.util.Random
 */
@SuppressWarnings({"all", "unchecked"})
@Approximate(java.util.Random.class)
public class Random implements LibSLRuntime.Automaton, Serializable {
    private static final long serialVersionUID = 3905348978240129619L;

    private static final ObjectStreamField[] serialPersistentFields = {};

    static {
        Engine.assume(true);
    }

    private byte __$lsl_state = __$lsl_States.Allocated;

    @LibSLRuntime.AutomatonConstructor
    public Random(Void __$lsl_token, final byte p0) {
        this.__$lsl_state = p0;
    }

    @LibSLRuntime.AutomatonConstructor
    public Random(final Void __$lsl_token) {
        this(__$lsl_token, __$lsl_States.Allocated);
    }

    /**
     * [CONSTRUCTOR] RandomAutomaton::Random(Random) -> Random
     */
    public Random() {
        this((Void) null);
        Engine.assume(this.__$lsl_state == __$lsl_States.Allocated);
        /* body */ {
            Engine.assume(true);
        }
        this.__$lsl_state = __$lsl_States.Initialized;
    }

    /**
     * [CONSTRUCTOR] RandomAutomaton::Random(Random, long) -> Random
     */
    public Random(long seed) {
        this((Void) null);
        Engine.assume(this.__$lsl_state == __$lsl_States.Allocated);
        /* body */ {
            Engine.assume(true);
        }
        this.__$lsl_state = __$lsl_States.Initialized;
    }

    /**
     * [SUBROUTINE] RandomAutomaton::_nextBytes(array<byte>, int) -> void
     */
    private static void _nextBytes(byte[] result, int numBytes) {
        /* body */ {
            final byte[] symbolicArray = Engine.makeSymbolicByteArray(numBytes);
            LibSLRuntime.ArrayActions.copy(symbolicArray, 0, result, 0, numBytes);
        }
    }

    /**
     * [SUBROUTINE] RandomAutomaton::_generateRandomIntegerArrayWithBounds(int, int, int) -> array<int>
     */
    private int[] _generateRandomIntegerArrayWithBounds(int size, int randomNumberOrigin,
            int randomNumberBound) {
        int[] result = null;
        /* body */ {
            result = Engine.makeSymbolicIntArray(size);
            int i = 0;
            for (i = 0; i < size; i += 1) {
                Engine.assume(result[i] >= randomNumberOrigin);
                Engine.assume(result[i] < randomNumberBound);
            }
            ;
        }
        return result;
    }

    /**
     * [SUBROUTINE] RandomAutomaton::_generateRandomLongArrayWithBounds(int, long, long) -> array<long>
     */
    private long[] _generateRandomLongArrayWithBounds(int size, long randomNumberOrigin,
            long randomNumberBound) {
        long[] result = null;
        /* body */ {
            result = Engine.makeSymbolicLongArray(size);
            int i = 0;
            for (i = 0; i < size; i += 1) {
                Engine.assume(result[i] >= randomNumberOrigin);
                Engine.assume(result[i] < randomNumberBound);
            }
            ;
        }
        return result;
    }

    /**
     * [SUBROUTINE] RandomAutomaton::_generateRandomDoubleArrayWithBounds(int, double, double) -> array<double>
     */
    private double[] _generateRandomDoubleArrayWithBounds(int size, double randomNumberOrigin,
            double randomNumberBound) {
        double[] result = null;
        /* body */ {
            result = Engine.makeSymbolicDoubleArray(size);
            int i = 0;
            for (i = 0; i < size; i += 1) {
                final double item = result[i];
                Engine.assume(item == item);
                Engine.assume(item >= randomNumberOrigin);
                Engine.assume(item < randomNumberBound);
            }
            ;
        }
        return result;
    }

    /**
     * [FUNCTION] RandomAutomaton::doubles(Random) -> DoubleStream
     */
    public DoubleStream doubles() {
        DoubleStream result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            result = (DoubleStreamLSL) ((Object) new generated.java.util.stream.DoubleStreamLSL((Void) null, 
                /* state = */ generated.java.util.stream.DoubleStreamLSL.__$lsl_States.Initialized, 
                /* storage = */ _generateRandomDoubleArrayWithBounds(LibSLGlobals.MAX_RANDOM_STREAM_SIZE, 0, 1), 
                /* length = */ LibSLGlobals.MAX_RANDOM_STREAM_SIZE, 
                /* closeHandlers = */ Engine.makeSymbolicList(), 
                /* isParallel = */ false, 
                /* linkedOrConsumed = */ false
            ));
        }
        return result;
    }

    /**
     * [FUNCTION] RandomAutomaton::doubles(Random, double, double) -> DoubleStream
     */
    public DoubleStream doubles(double randomNumberOrigin, double randomNumberBound) {
        DoubleStream result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            if (randomNumberOrigin >= randomNumberBound) {
                throw new IllegalArgumentException();
            }
            result = (DoubleStreamLSL) ((Object) new generated.java.util.stream.DoubleStreamLSL((Void) null, 
                /* state = */ generated.java.util.stream.DoubleStreamLSL.__$lsl_States.Initialized, 
                /* storage = */ _generateRandomDoubleArrayWithBounds(LibSLGlobals.MAX_RANDOM_STREAM_SIZE, randomNumberOrigin, randomNumberBound), 
                /* length = */ LibSLGlobals.MAX_RANDOM_STREAM_SIZE, 
                /* closeHandlers = */ Engine.makeSymbolicList(), 
                /* isParallel = */ false, 
                /* linkedOrConsumed = */ false
            ));
        }
        return result;
    }

    /**
     * [FUNCTION] RandomAutomaton::doubles(Random, long) -> DoubleStream
     */
    public DoubleStream doubles(long streamSize) {
        DoubleStream result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            int size = ((int) streamSize);
            if (size < 0) {
                throw new IllegalArgumentException();
            }
            if (size > LibSLGlobals.MAX_RANDOM_STREAM_SIZE) {
                size = LibSLGlobals.MAX_RANDOM_STREAM_SIZE;
            }
            result = (DoubleStreamLSL) ((Object) new generated.java.util.stream.DoubleStreamLSL((Void) null, 
                /* state = */ generated.java.util.stream.DoubleStreamLSL.__$lsl_States.Initialized, 
                /* storage = */ Engine.makeSymbolicDoubleArray(size), 
                /* length = */ size, 
                /* closeHandlers = */ Engine.makeSymbolicList(), 
                /* isParallel = */ false, 
                /* linkedOrConsumed = */ false
            ));
        }
        return result;
    }

    /**
     * [FUNCTION] RandomAutomaton::doubles(Random, long, double, double) -> DoubleStream
     */
    public DoubleStream doubles(long streamSize, double randomNumberOrigin,
            double randomNumberBound) {
        DoubleStream result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            int size = ((int) streamSize);
            if (size < 0) {
                throw new IllegalArgumentException();
            }
            if (randomNumberOrigin >= randomNumberBound) {
                throw new IllegalArgumentException();
            }
            if (size > LibSLGlobals.MAX_RANDOM_STREAM_SIZE) {
                size = LibSLGlobals.MAX_RANDOM_STREAM_SIZE;
            }
            result = (DoubleStreamLSL) ((Object) new generated.java.util.stream.DoubleStreamLSL((Void) null, 
                /* state = */ generated.java.util.stream.DoubleStreamLSL.__$lsl_States.Initialized, 
                /* storage = */ _generateRandomDoubleArrayWithBounds(size, randomNumberOrigin, randomNumberBound), 
                /* length = */ size, 
                /* closeHandlers = */ Engine.makeSymbolicList(), 
                /* isParallel = */ false, 
                /* linkedOrConsumed = */ false
            ));
        }
        return result;
    }

    /**
     * [FUNCTION] RandomAutomaton::ints(Random) -> IntStream
     */
    public IntStream ints() {
        IntStream result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            result = (IntStreamLSL) ((Object) new generated.java.util.stream.IntStreamLSL((Void) null, 
                /* state = */ generated.java.util.stream.IntStreamLSL.__$lsl_States.Initialized, 
                /* storage = */ Engine.makeSymbolicIntArray(LibSLGlobals.MAX_RANDOM_STREAM_SIZE), 
                /* length = */ LibSLGlobals.MAX_RANDOM_STREAM_SIZE, 
                /* closeHandlers = */ Engine.makeSymbolicList(), 
                /* isParallel = */ false, 
                /* linkedOrConsumed = */ false
            ));
        }
        return result;
    }

    /**
     * [FUNCTION] RandomAutomaton::ints(Random, int, int) -> IntStream
     */
    public IntStream ints(int randomNumberOrigin, int randomNumberBound) {
        IntStream result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            if (randomNumberOrigin >= randomNumberBound) {
                throw new IllegalArgumentException();
            }
            result = (IntStreamLSL) ((Object) new generated.java.util.stream.IntStreamLSL((Void) null, 
                /* state = */ generated.java.util.stream.IntStreamLSL.__$lsl_States.Initialized, 
                /* storage = */ _generateRandomIntegerArrayWithBounds(LibSLGlobals.MAX_RANDOM_STREAM_SIZE, randomNumberOrigin, randomNumberBound), 
                /* length = */ LibSLGlobals.MAX_RANDOM_STREAM_SIZE, 
                /* closeHandlers = */ Engine.makeSymbolicList(), 
                /* isParallel = */ false, 
                /* linkedOrConsumed = */ false
            ));
        }
        return result;
    }

    /**
     * [FUNCTION] RandomAutomaton::ints(Random, long) -> IntStream
     */
    public IntStream ints(long streamSize) {
        IntStream result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            int size = ((int) streamSize);
            if (size < 0) {
                throw new IllegalArgumentException();
            }
            if (size > LibSLGlobals.MAX_RANDOM_STREAM_SIZE) {
                size = LibSLGlobals.MAX_RANDOM_STREAM_SIZE;
            }
            result = (IntStreamLSL) ((Object) new generated.java.util.stream.IntStreamLSL((Void) null, 
                /* state = */ generated.java.util.stream.IntStreamLSL.__$lsl_States.Initialized, 
                /* storage = */ Engine.makeSymbolicIntArray(size), 
                /* length = */ size, 
                /* closeHandlers = */ Engine.makeSymbolicList(), 
                /* isParallel = */ false, 
                /* linkedOrConsumed = */ false
            ));
        }
        return result;
    }

    /**
     * [FUNCTION] RandomAutomaton::ints(Random, long, int, int) -> IntStream
     */
    public IntStream ints(long streamSize, int randomNumberOrigin, int randomNumberBound) {
        IntStream result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            int size = ((int) streamSize);
            if (size < 0) {
                throw new IllegalArgumentException();
            }
            if (randomNumberOrigin >= randomNumberBound) {
                throw new IllegalArgumentException();
            }
            if (size > LibSLGlobals.MAX_RANDOM_STREAM_SIZE) {
                size = LibSLGlobals.MAX_RANDOM_STREAM_SIZE;
            }
            result = (IntStreamLSL) ((Object) new generated.java.util.stream.IntStreamLSL((Void) null, 
                /* state = */ generated.java.util.stream.IntStreamLSL.__$lsl_States.Initialized, 
                /* storage = */ _generateRandomIntegerArrayWithBounds(size, randomNumberOrigin, randomNumberBound), 
                /* length = */ size, 
                /* closeHandlers = */ Engine.makeSymbolicList(), 
                /* isParallel = */ false, 
                /* linkedOrConsumed = */ false
            ));
        }
        return result;
    }

    /**
     * [FUNCTION] RandomAutomaton::longs(Random) -> LongStream
     */
    public LongStream longs() {
        LongStream result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            result = (LongStreamLSL) ((Object) new generated.java.util.stream.LongStreamLSL((Void) null, 
                /* state = */ generated.java.util.stream.LongStreamLSL.__$lsl_States.Initialized, 
                /* storage = */ Engine.makeSymbolicLongArray(LibSLGlobals.MAX_RANDOM_STREAM_SIZE), 
                /* length = */ LibSLGlobals.MAX_RANDOM_STREAM_SIZE, 
                /* closeHandlers = */ Engine.makeSymbolicList(), 
                /* isParallel = */ false, 
                /* linkedOrConsumed = */ false
            ));
        }
        return result;
    }

    /**
     * [FUNCTION] RandomAutomaton::longs(Random, long) -> LongStream
     */
    public LongStream longs(long streamSize) {
        LongStream result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            int size = ((int) streamSize);
            if (size < 0) {
                throw new IllegalArgumentException();
            }
            if (size > LibSLGlobals.MAX_RANDOM_STREAM_SIZE) {
                size = LibSLGlobals.MAX_RANDOM_STREAM_SIZE;
            }
            result = (LongStreamLSL) ((Object) new generated.java.util.stream.LongStreamLSL((Void) null, 
                /* state = */ generated.java.util.stream.LongStreamLSL.__$lsl_States.Initialized, 
                /* storage = */ Engine.makeSymbolicLongArray(size), 
                /* length = */ size, 
                /* closeHandlers = */ Engine.makeSymbolicList(), 
                /* isParallel = */ false, 
                /* linkedOrConsumed = */ false
            ));
        }
        return result;
    }

    /**
     * [FUNCTION] RandomAutomaton::longs(Random, long, long) -> LongStream
     */
    public LongStream longs(long randomNumberOrigin, long randomNumberBound) {
        LongStream result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            if (randomNumberOrigin >= randomNumberBound) {
                throw new IllegalArgumentException();
            }
            result = (LongStreamLSL) ((Object) new generated.java.util.stream.LongStreamLSL((Void) null, 
                /* state = */ generated.java.util.stream.LongStreamLSL.__$lsl_States.Initialized, 
                /* storage = */ _generateRandomLongArrayWithBounds(LibSLGlobals.MAX_RANDOM_STREAM_SIZE, randomNumberOrigin, randomNumberBound), 
                /* length = */ LibSLGlobals.MAX_RANDOM_STREAM_SIZE, 
                /* closeHandlers = */ Engine.makeSymbolicList(), 
                /* isParallel = */ false, 
                /* linkedOrConsumed = */ false
            ));
        }
        return result;
    }

    /**
     * [FUNCTION] RandomAutomaton::longs(Random, long, long, long) -> LongStream
     */
    public LongStream longs(long streamSize, long randomNumberOrigin, long randomNumberBound) {
        LongStream result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            int size = ((int) streamSize);
            if (size < 0) {
                throw new IllegalArgumentException();
            }
            if (randomNumberOrigin >= randomNumberBound) {
                throw new IllegalArgumentException();
            }
            if (size > LibSLGlobals.MAX_RANDOM_STREAM_SIZE) {
                size = LibSLGlobals.MAX_RANDOM_STREAM_SIZE;
            }
            result = (LongStreamLSL) ((Object) new generated.java.util.stream.LongStreamLSL((Void) null, 
                /* state = */ generated.java.util.stream.LongStreamLSL.__$lsl_States.Initialized, 
                /* storage = */ _generateRandomLongArrayWithBounds(size, randomNumberOrigin, randomNumberBound), 
                /* length = */ size, 
                /* closeHandlers = */ Engine.makeSymbolicList(), 
                /* isParallel = */ false, 
                /* linkedOrConsumed = */ false
            ));
        }
        return result;
    }

    /**
     * [FUNCTION] RandomAutomaton::nextBoolean(Random) -> boolean
     */
    public boolean nextBoolean() {
        boolean result = false;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            result = Engine.makeSymbolicBoolean();
        }
        return result;
    }

    /**
     * [FUNCTION] RandomAutomaton::nextBytes(Random, array<byte>) -> void
     */
    public void nextBytes(byte[] bytes) {
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            _nextBytes(bytes, bytes.length);
        }
    }

    /**
     * [FUNCTION] RandomAutomaton::nextDouble(Random) -> double
     */
    public double nextDouble() {
        double result = 0.0d;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            result = Engine.makeSymbolicDouble();
            Engine.assume(0.0d <= result);
            Engine.assume(result < 1.0d);
        }
        return result;
    }

    /**
     * [FUNCTION] RandomAutomaton::nextFloat(Random) -> float
     */
    public float nextFloat() {
        float result = 0.0f;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            result = Engine.makeSymbolicFloat();
            Engine.assume(0.0f <= result);
            Engine.assume(result < 1.0f);
        }
        return result;
    }

    /**
     * [FUNCTION] RandomAutomaton::nextGaussian(Random) -> double
     */
    public synchronized double nextGaussian() {
        double result = 0.0d;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            result = Engine.makeSymbolicDouble();
            final boolean isNaN = result != result;
            Engine.assume(!isNaN);
        }
        return result;
    }

    /**
     * [FUNCTION] RandomAutomaton::nextInt(Random) -> int
     */
    public int nextInt() {
        int result = 0;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            result = Engine.makeSymbolicInt();
        }
        return result;
    }

    /**
     * [FUNCTION] RandomAutomaton::nextInt(Random, int) -> int
     */
    public int nextInt(int bound) {
        int result = 0;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            if (bound <= 0) {
                throw new IllegalArgumentException("bound must be positive");
            }
            result = Engine.makeSymbolicInt();
            Engine.assume(0 <= result);
            Engine.assume(result < bound);
        }
        return result;
    }

    /**
     * [FUNCTION] RandomAutomaton::nextLong(Random) -> long
     */
    public long nextLong() {
        long result = 0L;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            result = Engine.makeSymbolicLong();
        }
        return result;
    }

    /**
     * [FUNCTION] RandomAutomaton::setSeed(Random, long) -> void
     */
    public synchronized void setSeed(long seed) {
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            Engine.assume(true);
        }
    }

    /**
     * [FUNCTION] RandomAutomaton::readObject(ObjectInputStream) -> void
     */
    private void readObject(ObjectInputStream s) throws java.io.IOException,
            java.lang.ClassNotFoundException {
        /* body */ {
            LibSLRuntime.not_implemented(/* no serialization support */);
        }
    }

    /**
     * [FUNCTION] RandomAutomaton::writeObject(ObjectOutputStream) -> void
     */
    private synchronized void writeObject(ObjectOutputStream s) throws java.io.IOException {
        /* body */ {
            LibSLRuntime.not_implemented(/* no serialization support */);
        }
    }

    public static final class __$lsl_States {
        public static final byte Allocated = (byte) 0;

        public static final byte Initialized = (byte) 1;
    }

    @Approximate(Random.class)
    public static final class __hook {
        private __hook(Void o1, Void o2) {
            Engine.assume(false);
        }
    }
}
