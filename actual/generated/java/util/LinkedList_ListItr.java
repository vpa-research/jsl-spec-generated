// Generated by the LibSL translator.  DO NOT EDIT!
// sources:
//  - java/util/LinkedList.lsl:35
//  - java/util/LinkedList.ListIterator.lsl:15
//
package generated.java.util;

import java.lang.IllegalStateException;
import java.lang.NullPointerException;
import java.lang.Object;
import java.lang.SuppressWarnings;
import java.lang.Void;
import java.util.ConcurrentModificationException;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.jacodb.approximation.annotation.Approximate;
import org.usvm.api.Engine;
import org.usvm.api.SymbolicList;
import runtime.LibSLRuntime;

/**
 * LinkedList_ListIteratorAutomaton for LinkedList_ListIterator ~> java.util.LinkedList_ListItr
 */
@SuppressWarnings({"all", "unchecked"})
@Approximate(stub.java.util.LinkedList_ListItr.class)
public final class LinkedList_ListItr implements LibSLRuntime.Automaton, ListIterator {
    static {
        Engine.assume(true);
    }

    public LinkedList parent;

    public int cursor;

    public int expectedModCount;

    public int lastRet;

    @LibSLRuntime.AutomatonConstructor
    public LinkedList_ListItr(Void __$lsl_token, final byte p0, final LinkedList p1, final int p2,
            final int p3, final int p4) {
        this.parent = p1;
        this.cursor = p2;
        this.expectedModCount = p3;
        this.lastRet = p4;
    }

    @LibSLRuntime.AutomatonConstructor
    public LinkedList_ListItr(final Void __$lsl_token) {
        this(__$lsl_token, __$lsl_States.Initialized, null, 0, 0, -1);
    }

    /**
     * [SUBROUTINE] LinkedList_ListIteratorAutomaton::_checkForComodification() -> void
     * Source: java/util/LinkedList.ListIterator.lsl:54
     */
    private void _checkForComodification() {
        /* body */ {
            final int modCount = ((LinkedList) ((Object) this.parent)).modCount;
            if (modCount != this.expectedModCount) {
                throw new ConcurrentModificationException();
            }
        }
    }

    /**
     * [FUNCTION] LinkedList_ListIteratorAutomaton::hasPrevious(LinkedList_ListIterator) -> boolean
     * Source: java/util/LinkedList.ListIterator.lsl:64
     */
    public boolean hasPrevious() {
        boolean result = false;
        /* body */ {
            result = this.cursor != 0;
        }
        return result;
    }

    /**
     * [FUNCTION] LinkedList_ListIteratorAutomaton::nextIndex(LinkedList_ListIterator) -> int
     * Source: java/util/LinkedList.ListIterator.lsl:70
     */
    public int nextIndex() {
        int result = 0;
        /* body */ {
            result = this.cursor;
        }
        return result;
    }

    /**
     * [FUNCTION] LinkedList_ListIteratorAutomaton::previousIndex(LinkedList_ListIterator) -> int
     * Source: java/util/LinkedList.ListIterator.lsl:76
     */
    public int previousIndex() {
        int result = 0;
        /* body */ {
            result = this.cursor - 1;
        }
        return result;
    }

    /**
     * [FUNCTION] LinkedList_ListIteratorAutomaton::hasNext(LinkedList_ListIterator) -> boolean
     * Source: java/util/LinkedList.ListIterator.lsl:82
     */
    public boolean hasNext() {
        boolean result = false;
        /* body */ {
            Engine.assume(this.parent != null);
            result = this.cursor != ((LinkedList) ((Object) this.parent)).storage.size();
        }
        return result;
    }

    /**
     * [FUNCTION] LinkedList_ListIteratorAutomaton::next(LinkedList_ListIterator) -> Object
     * Source: java/util/LinkedList.ListIterator.lsl:91
     */
    public Object next() {
        Object result = null;
        /* body */ {
            Engine.assume(this.parent != null);
            _checkForComodification();
            final SymbolicList<Object> parentStorage = ((LinkedList) ((Object) this.parent)).storage;
            final int i = this.cursor;
            if (i >= parentStorage.size()) {
                throw new NoSuchElementException();
            }
            this.cursor = i + 1;
            this.lastRet = i;
            result = parentStorage.get(i);
        }
        return result;
    }

    /**
     * [FUNCTION] LinkedList_ListIteratorAutomaton::previous(LinkedList_ListIterator) -> Object
     * Source: java/util/LinkedList.ListIterator.lsl:111
     */
    public Object previous() {
        Object result = null;
        /* body */ {
            Engine.assume(this.parent != null);
            _checkForComodification();
            final SymbolicList<Object> parentStorage = ((LinkedList) ((Object) this.parent)).storage;
            final int i = this.cursor - 1;
            if (i < 0) {
                throw new NoSuchElementException();
            }
            if (i >= parentStorage.size()) {
                throw new ConcurrentModificationException();
            }
            this.cursor = i;
            this.lastRet = i;
            result = parentStorage.get(i);
        }
        return result;
    }

    /**
     * [FUNCTION] LinkedList_ListIteratorAutomaton::remove(LinkedList_ListIterator) -> void
     * Source: java/util/LinkedList.ListIterator.lsl:135
     */
    public void remove() {
        /* body */ {
            Engine.assume(this.parent != null);
            if (this.lastRet < 0) {
                throw new IllegalStateException();
            }
            _checkForComodification();
            final SymbolicList<Object> pStorage = ((LinkedList) ((Object) this.parent)).storage;
            if (this.lastRet >= pStorage.size()) {
                throw new ConcurrentModificationException();
            } else {
                ((LinkedList) ((Object) this.parent)).modCount += 1;
                pStorage.remove(this.lastRet);
            }
            this.cursor = this.lastRet;
            this.lastRet = -1;
            this.expectedModCount = ((LinkedList) ((Object) this.parent)).modCount;
        }
    }

    /**
     * [FUNCTION] LinkedList_ListIteratorAutomaton::set(LinkedList_ListIterator, Object) -> void
     * Source: java/util/LinkedList.ListIterator.lsl:163
     */
    public void set(Object e) {
        /* body */ {
            Engine.assume(this.parent != null);
            if (this.lastRet < 0) {
                throw new IllegalStateException();
            }
            _checkForComodification();
            final SymbolicList<Object> pStorage = ((LinkedList) ((Object) this.parent)).storage;
            if (this.lastRet >= pStorage.size()) {
                throw new ConcurrentModificationException();
            } else {
                pStorage.set(this.lastRet, e);
            }
        }
    }

    /**
     * [FUNCTION] LinkedList_ListIteratorAutomaton::add(LinkedList_ListIterator, Object) -> void
     * Source: java/util/LinkedList.ListIterator.lsl:181
     */
    public void add(Object e) {
        /* body */ {
            Engine.assume(this.parent != null);
            _checkForComodification();
            final int i = this.cursor;
            final SymbolicList<Object> pStorage = ((LinkedList) ((Object) this.parent)).storage;
            if (this.lastRet > pStorage.size()) {
                throw new ConcurrentModificationException();
            } else {
                ((LinkedList) ((Object) this.parent)).modCount += 1;
                pStorage.insert(i, e);
            }
            this.cursor = i + 1;
            this.lastRet = -1;
            this.expectedModCount = ((LinkedList) ((Object) this.parent)).modCount;
        }
    }

    /**
     * [FUNCTION] LinkedList_ListIteratorAutomaton::forEachRemaining(LinkedList_ListIterator, Consumer) -> void
     * Source: java/util/LinkedList.ListIterator.lsl:208
     */
    public void forEachRemaining(Consumer userAction) {
        /* body */ {
            Engine.assume(this.parent != null);
            if (userAction == null) {
                throw new NullPointerException();
            }
            int i = this.cursor;
            final SymbolicList<Object> es = ((LinkedList) ((Object) this.parent)).storage;
            final int size = es.size();
            if (i < size) {
                while ((i < size) && (((LinkedList) ((Object) this.parent)).modCount == this.expectedModCount)) {
                    final Object item = es.get(i);
                    userAction.accept(item);
                    i += 1;
                }
                ;
                this.cursor = i;
                this.lastRet = i - 1;
                _checkForComodification();
            }
        }
    }

    public static final class __$lsl_States {
        public static final byte Initialized = (byte) 0;
    }

    @Approximate(LinkedList_ListItr.class)
    public static final class __hook {
        private __hook(Void o1, Void o2) {
            Engine.assume(false);
        }
    }
}
