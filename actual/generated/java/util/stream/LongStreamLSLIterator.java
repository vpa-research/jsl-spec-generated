// Generated by the LibSL translator.  DO NOT EDIT!
// sources:
//  - java/util/stream/LongStream.lsl:36
//  - java/util/stream/LongStream.Iterator.lsl:17
//
package generated.java.util.stream;

import java.lang.Long;
import java.lang.NullPointerException;
import java.lang.Object;
import java.lang.SuppressWarnings;
import java.lang.UnsupportedOperationException;
import java.lang.Void;
import java.util.NoSuchElementException;
import java.util.PrimitiveIterator;
import java.util.function.Consumer;
import java.util.function.LongConsumer;
import org.jacodb.approximation.annotation.Approximate;
import org.usvm.api.Engine;
import runtime.LibSLRuntime;

/**
 * LongStreamIteratorAutomaton for LongStreamLSLIterator ~> java.util.stream.LongStreamLSLIterator
 */
@SuppressWarnings({"all", "unchecked"})
@Approximate(stub.java.util.stream.LongStreamLSLIterator.class)
public class LongStreamLSLIterator implements LibSLRuntime.Automaton, PrimitiveIterator.OfLong {
    static {
        Engine.assume(true);
    }

    public LongStreamLSL parent;

    public int cursor;

    @LibSLRuntime.AutomatonConstructor
    public LongStreamLSLIterator(Void __$lsl_token, final byte p0, final LongStreamLSL p1,
            final int p2) {
        this.parent = p1;
        this.cursor = p2;
    }

    @LibSLRuntime.AutomatonConstructor
    public LongStreamLSLIterator(final Void __$lsl_token) {
        this(__$lsl_token, __$lsl_States.Initialized, null, 0);
    }

    /**
     * [FUNCTION] LongStreamIteratorAutomaton::hasNext(LongStreamLSLIterator) -> boolean
     * Source: java/util/stream/LongStream.Iterator.lsl:40
     */
    public boolean hasNext() {
        boolean result = false;
        /* body */ {
            Engine.assume(this.parent != null);
            result = this.cursor != ((LongStreamLSL) ((Object) this.parent)).length;
        }
        return result;
    }

    /**
     * [FUNCTION] LongStreamIteratorAutomaton::next(LongStreamLSLIterator) -> Long
     * Source: java/util/stream/LongStream.Iterator.lsl:49
     */
    public Long next() {
        Long result = null;
        /* body */ {
            Engine.assume(this.parent != null);
            final long[] parentStorage = ((LongStreamLSL) ((Object) this.parent)).storage;
            final int i = this.cursor;
            if (i >= ((LongStreamLSL) ((Object) this.parent)).length) {
                throw new NoSuchElementException();
            }
            this.cursor = i + 1;
            result = parentStorage[i];
        }
        return result;
    }

    /**
     * [FUNCTION] LongStreamIteratorAutomaton::nextLong(LongStreamLSLIterator) -> long
     * Source: java/util/stream/LongStream.Iterator.lsl:65
     */
    public long nextLong() {
        long result = 0L;
        /* body */ {
            Engine.assume(this.parent != null);
            final long[] parentStorage = ((LongStreamLSL) ((Object) this.parent)).storage;
            final int i = this.cursor;
            if (i >= ((LongStreamLSL) ((Object) this.parent)).length) {
                throw new NoSuchElementException();
            }
            this.cursor = i + 1;
            result = parentStorage[i];
        }
        return result;
    }

    /**
     * [FUNCTION] LongStreamIteratorAutomaton::remove(LongStreamLSLIterator) -> void
     * Source: java/util/stream/LongStream.Iterator.lsl:81
     */
    public void remove() {
        /* body */ {
            throw new UnsupportedOperationException();
        }
    }

    /**
     * [FUNCTION] LongStreamIteratorAutomaton::forEachRemaining(LongStreamLSLIterator, Consumer) -> void
     * Source: java/util/stream/LongStream.Iterator.lsl:87
     */
    public void forEachRemaining(Consumer userAction) {
        /* body */ {
            Engine.assume(this.parent != null);
            if (userAction == null) {
                throw new NullPointerException();
            }
            int i = this.cursor;
            final int size = ((LongStreamLSL) ((Object) this.parent)).length;
            if (i != size) {
                final long[] pStorage = ((LongStreamLSL) ((Object) this.parent)).storage;
                while (i < size) {
                    final long item = pStorage[i];
                    userAction.accept(item);
                    i += 1;
                }
                ;
                this.cursor = i;
            }
        }
    }

    /**
     * [FUNCTION] LongStreamIteratorAutomaton::forEachRemaining(LongStreamLSLIterator, LongConsumer) -> void
     * Source: java/util/stream/LongStream.Iterator.lsl:112
     */
    public void forEachRemaining(LongConsumer userAction) {
        /* body */ {
            Engine.assume(this.parent != null);
            if (userAction == null) {
                throw new NullPointerException();
            }
            int i = this.cursor;
            final int size = ((LongStreamLSL) ((Object) this.parent)).length;
            if (i != size) {
                final long[] pStorage = ((LongStreamLSL) ((Object) this.parent)).storage;
                while (i < size) {
                    final long item = pStorage[i];
                    userAction.accept(item);
                    i += 1;
                }
                ;
                this.cursor = i;
            }
        }
    }

    public static final class __$lsl_States {
        public static final byte Initialized = (byte) 0;
    }

    @Approximate(LongStreamLSLIterator.class)
    public static final class __hook {
        private __hook(Void o1, Void o2) {
            Engine.assume(false);
        }
    }
}
