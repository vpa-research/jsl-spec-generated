// Generated by the LibSL translator.  DO NOT EDIT!
// sources:
//  - java/util/HashMap.lsl:109
//  - java/util/HashMap.EntrySpliterator.lsl:20
//
package generated.java.util;

import generated.runtime.LibSLGlobals;
import java.lang.NullPointerException;
import java.lang.Object;
import java.lang.SuppressWarnings;
import java.lang.Void;
import java.util.ConcurrentModificationException;
import java.util.Map;
import java.util.Spliterator;
import java.util.function.Consumer;
import org.jacodb.approximation.annotation.Approximate;
import org.usvm.api.Engine;
import runtime.LibSLRuntime;

/**
 * HashMap_EntrySpliteratorAutomaton for HashMap_EntrySpliterator ~> java.util.HashMap_EntrySpliterator
 */
@SuppressWarnings({"all", "unchecked"})
@Approximate(stub.java.util.HashMap_EntrySpliterator.class)
public final class HashMap_EntrySpliterator implements LibSLRuntime.Automaton, Spliterator {
    static {
        Engine.assume(true);
    }

    private byte __$lsl_state = __$lsl_States.Allocated;

    public HashMap parent;

    public Map.Entry<Object, Object>[] entryStorage;

    public int index;

    public int fence;

    public int est;

    public int expectedModCount;

    @LibSLRuntime.AutomatonConstructor
    public HashMap_EntrySpliterator(Void __$lsl_token, final byte p0, final HashMap p1,
            final Map.Entry<Object, Object>[] p2, final int p3, final int p4, final int p5,
            final int p6) {
        this.__$lsl_state = p0;
        this.parent = p1;
        this.entryStorage = p2;
        this.index = p3;
        this.fence = p4;
        this.est = p5;
        this.expectedModCount = p6;
    }

    @LibSLRuntime.AutomatonConstructor
    public HashMap_EntrySpliterator(final Void __$lsl_token) {
        this(__$lsl_token, __$lsl_States.Allocated, null, null, 0, -1, 0, 0);
    }

    /**
     * [CONSTRUCTOR] HashMap_EntrySpliteratorAutomaton::<init>(HashMap_EntrySpliterator, HashMap, int, int, int, int) -> void
     * Source: java/util/HashMap.EntrySpliterator.lsl:90
     */
    private HashMap_EntrySpliterator(HashMap m, int origin, int fence, int est,
            int expectedModCount) {
        this((Void) null);
        Engine.assume(this.__$lsl_state == __$lsl_States.Allocated);
        /* body */ {
            LibSLRuntime.error("Private constructor call");
        }
        this.__$lsl_state = __$lsl_States.Initialized;
    }

    /**
     * [SUBROUTINE] HashMap_EntrySpliteratorAutomaton::_getFence() -> int
     * Source: java/util/HashMap.EntrySpliterator.lsl:59
     */
    private int _getFence() {
        int result = 0;
        /* body */ {
            Engine.assume(this.parent != null);
            if (this.fence < 0) {
                final int storageSize = this.entryStorage.length;
                this.est = storageSize;
                this.fence = storageSize;
                this.expectedModCount = ((HashMap) ((Object) this.parent)).modCount;
            }
            result = this.fence;
        }
        return result;
    }

    /**
     * [SUBROUTINE] HashMap_EntrySpliteratorAutomaton::_checkForComodification() -> void
     * Source: java/util/HashMap.EntrySpliterator.lsl:80
     */
    private void _checkForComodification() {
        /* body */ {
            final int modCount = ((HashMap) ((Object) this.parent)).modCount;
            if (this.expectedModCount != modCount) {
                throw new ConcurrentModificationException();
            }
        }
    }

    /**
     * [FUNCTION] HashMap_EntrySpliteratorAutomaton::characteristics(HashMap_EntrySpliterator) -> int
     * Source: java/util/HashMap.EntrySpliterator.lsl:100
     */
    public int characteristics() {
        int result = 0;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            if ((this.fence < 0) || (this.est == this.entryStorage.length)) {
                result = LibSLGlobals.SPLITERATOR_SIZED | LibSLGlobals.SPLITERATOR_DISTINCT;
            } else {
                result = LibSLGlobals.SPLITERATOR_DISTINCT;
            }
        }
        return result;
    }

    /**
     * [FUNCTION] HashMap_EntrySpliteratorAutomaton::estimateSize(HashMap_EntrySpliterator) -> long
     * Source: java/util/HashMap.EntrySpliterator.lsl:110
     */
    public final long estimateSize() {
        long result = 0L;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            _getFence();
            result = ((long) this.est);
        }
        return result;
    }

    /**
     * [FUNCTION] HashMap_EntrySpliteratorAutomaton::forEachRemaining(HashMap_EntrySpliterator, Consumer) -> void
     * Source: java/util/HashMap.EntrySpliterator.lsl:117
     */
    public void forEachRemaining(Consumer userAction) {
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            if (userAction == null) {
                throw new NullPointerException();
            }
            int hi = this.fence;
            int mc = this.expectedModCount;
            int i = this.index;
            final int storageSize = this.entryStorage.length;
            if (hi < 0) {
                this.expectedModCount = ((HashMap) ((Object) this.parent)).modCount;
                mc = this.expectedModCount;
                this.fence = storageSize;
                hi = storageSize;
            }
            this.index = hi;
            if ((storageSize > 0) && (storageSize >= hi) && (i >= 0) && (i < this.index)) {
                while (i < hi) {
                    Map.Entry<Object, Object> entry = entryStorage[i];
                    userAction.accept(entry);
                    i += 1;
                }
                ;
                final int modCount = ((HashMap) ((Object) this.parent)).modCount;
                if (modCount != mc) {
                    throw new ConcurrentModificationException();
                }
            }
        }
    }

    /**
     * [FUNCTION] HashMap_EntrySpliteratorAutomaton::getExactSizeIfKnown(HashMap_EntrySpliterator) -> long
     * Source: java/util/HashMap.EntrySpliterator.lsl:167
     */
    public long getExactSizeIfKnown() {
        long result = 0L;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            result = _getFence() - this.index;
        }
        return result;
    }

    /**
     * [FUNCTION] HashMap_EntrySpliteratorAutomaton::tryAdvance(HashMap_EntrySpliterator, Consumer) -> boolean
     * Source: java/util/HashMap.EntrySpliterator.lsl:180
     */
    public boolean tryAdvance(Consumer userAction) {
        boolean result = false;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            if (userAction == null) {
                throw new NullPointerException();
            }
            int hi = _getFence();
            int i = this.index;
            if (i < hi) {
                Map.Entry<Object, Object> entry = entryStorage[i];
                userAction.accept(entry);
                this.index += 1;
                _checkForComodification();
                result = true;
            }
            result = false;
        }
        return result;
    }

    /**
     * [FUNCTION] HashMap_EntrySpliteratorAutomaton::trySplit(HashMap_EntrySpliterator) -> Spliterator
     * Source: java/util/HashMap.EntrySpliterator.lsl:201
     */
    public Spliterator trySplit() {
        Spliterator result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            Engine.assume(this.parent != null);
            final int hi = _getFence();
            final int lo = this.index;
            int mid = (hi + lo) >>> 1;
            if (lo >= mid) {
                result = null;
            } else {
                this.est = this.est >>> 1;
                this.index = mid;
                result = (stub.java.util.HashMap_EntrySpliterator) ((Object) new HashMap_EntrySpliterator((Void) null, 
                    /* state = */ HashMap_EntrySpliterator.__$lsl_States.Initialized, 
                    /* parent = */ this.parent, 
                    /* entryStorage = */ this.entryStorage, 
                    /* index = */ lo, 
                    /* fence = */ mid, 
                    /* est = */ this.est, 
                    /* expectedModCount = */ this.expectedModCount
                ));
            }
        }
        return result;
    }

    public static final class __$lsl_States {
        public static final byte Allocated = (byte) 0;

        public static final byte Initialized = (byte) 1;
    }

    @Approximate(HashMap_EntrySpliterator.class)
    public static final class __hook {
        private __hook(Void o1, Void o2) {
            Engine.assume(false);
        }
    }
}
