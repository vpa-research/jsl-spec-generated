// Generated by the LibSL translator.  DO NOT EDIT!
// source: ?
//
package generated.java.util;

import generated.runtime.LibSLGlobals;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.AbstractSet;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.Set;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.stream.Stream;
import org.jacodb.approximation.annotation.Approximate;
import org.usvm.api.Engine;
import org.usvm.api.SymbolicMap;
import runtime.LibSLRuntime;

/**
 * HashSetAutomaton for HashSet ~> java.util.HashSet
 */
@Approximate(java.util.HashSet.class)
public class HashSet extends AbstractSet implements LibSLRuntime.Automaton, Set, Cloneable, Serializable {
    static {
    }

    private byte __$lsl_state = __$lsl_States.Allocated;

    public SymbolicMap<Object, Object> storage;

    public transient int length;

    public transient int modCount = 0;

    @LibSLRuntime.AutomatonConstructor
    public HashSet(Void __$lsl_token, final byte p0, final SymbolicMap<Object, Object> p1,
            final int p2, final int p3) {
        this.__$lsl_state = p0;
        this.storage = p1;
        this.length = p2;
        this.modCount = p3;
    }

    @LibSLRuntime.AutomatonConstructor
    public HashSet(final Void __$lsl_token) {
        this(__$lsl_token, __$lsl_States.Allocated, null, 0, 0);
    }

    /**
     * [CONSTRUCTOR] HashSetAutomaton::HashSet(HashSet) -> HashSet
     */
    public HashSet() {
        this((Void) null);
        Engine.assume(this.__$lsl_state == __$lsl_States.Allocated);
        /* body */ {
            storage = Engine.makeSymbolicMap();
        }
        this.__$lsl_state = __$lsl_States.Initialized;
    }

    /**
     * [CONSTRUCTOR] HashSetAutomaton::HashSet(HashSet, Collection) -> HashSet
     */
    public HashSet(Collection c) {
        this((Void) null);
        Engine.assume(this.__$lsl_state == __$lsl_States.Allocated);
        /* body */ {
            storage = Engine.makeSymbolicMap();
            _addAllElements(c);
        }
        this.__$lsl_state = __$lsl_States.Initialized;
    }

    /**
     * [CONSTRUCTOR] HashSetAutomaton::HashSet(HashSet, int) -> HashSet
     */
    public HashSet(int initialCapacity) {
        this((Void) null);
        /* body */ {
            if (initialCapacity < 0) {
                throw new IllegalArgumentException();
            }
            storage = Engine.makeSymbolicMap();
        }
    }

    /**
     * [CONSTRUCTOR] HashSetAutomaton::HashSet(HashSet, int, float) -> HashSet
     */
    public HashSet(int initialCapacity, float loadFactor) {
        this((Void) null);
        Engine.assume(this.__$lsl_state == __$lsl_States.Allocated);
        /* body */ {
            if (initialCapacity < 0) {
                throw new IllegalArgumentException();
            }
            if ((loadFactor <= 0) || Float.isNaN(loadFactor)) {
                throw new IllegalArgumentException();
            }
            storage = Engine.makeSymbolicMap();
        }
        this.__$lsl_state = __$lsl_States.Initialized;
    }

    /**
     * [CONSTRUCTOR] HashSetAutomaton::HashSet(HashSet, int, float, boolean) -> HashSet
     */
    private HashSet(int initialCapacity, float loadFactor, boolean dummy) {
        this((Void) null);
        Engine.assume(this.__$lsl_state == __$lsl_States.Allocated);
        /* body */ {
            LibSLRuntime.error("Private constructor call");
        }
        this.__$lsl_state = __$lsl_States.Initialized;
    }

    /**
     * [SUBROUTINE] HashSetAutomaton::_checkForComodification(int) -> void
     */
    public void _checkForComodification(int expectedModCount) {
        /* body */ {
            if (modCount != expectedModCount) {
                throw new ConcurrentModificationException();
            }
        }
    }

    /**
     * [SUBROUTINE] HashSetAutomaton::_addAllElements(Collection) -> boolean
     */
    private boolean _addAllElements(Collection c) {
        boolean result = false;
        /* body */ {
            final int lengthBeforeAdd = length;
            final Iterator iter = c.iterator();
            while (iter.hasNext()) {
                final Object key = iter.next();
                final boolean hasKey = storage.containsKey(key);
                if (!hasKey) {
                    storage.set(key, LibSLGlobals.HASHSET_VALUE);
                    length += 1;
                }
            }
            ;
            if (lengthBeforeAdd != length) {
                modCount += 1;
                result = true;
            } else {
                result = false;
            }
        }
        return result;
    }

    /**
     * [SUBROUTINE] HashSetAutomaton::_generateKey(map<Object, Object>) -> Object
     */
    private Object _generateKey(SymbolicMap<Object, Object> visitedKeys) {
        Object result = null;
        /* body */ {
            result = Engine.makeSymbolic(Object.class);
            Engine.assume(result != null);
            final boolean isKeyExist = storage.containsKey(result);
            Engine.assume(isKeyExist);
            final boolean isKeyWasVisited = visitedKeys.containsKey(result);
            Engine.assume(!isKeyWasVisited);
        }
        return result;
    }

    /**
     * [FUNCTION] HashSetAutomaton::add(HashSet, Object) -> boolean
     */
    public boolean add(Object obj) {
        boolean result = false;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            final boolean hasKey = storage.containsKey(obj);
            if (hasKey) {
                result = false;
            } else {
                length += 1;
                storage.set(obj, LibSLGlobals.HASHSET_VALUE);
                result = true;
            }
            modCount += 1;
        }
        return result;
    }

    /**
     * [FUNCTION] HashSetAutomaton::clear(HashSet) -> void
     */
    public void clear() {
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            length = 0;
            storage = Engine.makeSymbolicMap();
            modCount += 1;
        }
    }

    /**
     * [FUNCTION] HashSetAutomaton::clone(HashSet) -> Object
     */
    public Object clone() {
        Object result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            final SymbolicMap<Object, Object> storageCopy = Engine.makeSymbolicMap();
            storageCopy.union(storage);
            result = new HashSet((Void) null, 
            /* state = */ HashSet.__$lsl_States.Initialized, 
            /* storage = */ storageCopy, 
            /* length = */ length, 
            /* modCount = */ 0);
        }
        return result;
    }

    /**
     * [FUNCTION] HashSetAutomaton::contains(HashSet, Object) -> boolean
     */
    public boolean contains(Object obj) {
        boolean result = false;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            if (length == 0) {
                result = false;
            } else {
                result = storage.containsKey(obj);
            }
        }
        return result;
    }

    /**
     * [FUNCTION] HashSetAutomaton::isEmpty(HashSet) -> boolean
     */
    public boolean isEmpty() {
        boolean result = false;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            result = length == 0;
        }
        return result;
    }

    /**
     * [FUNCTION] HashSetAutomaton::iterator(HashSet) -> Iterator
     */
    public Iterator iterator() {
        Iterator result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            final SymbolicMap<Object, Object> visitedKeysMap = Engine.makeSymbolicMap();
            result = new HashSet_KeyIterator((Void) null, 
            /* state = */ HashSet_KeyIterator.__$lsl_States.Initialized, 
            /* expectedModCount = */ modCount, 
            /* visitedKeys = */ visitedKeysMap, 
            /* parent = */ this, 
            /* index = */ 0, 
            /* currentKey = */ 0, 
            /* nextWasCalled = */ false);
        }
        return result;
    }

    /**
     * [FUNCTION] HashSetAutomaton::remove(HashSet, Object) -> boolean
     */
    public boolean remove(Object obj) {
        boolean result = false;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            final boolean hasKey = storage.containsKey(obj);
            if (hasKey) {
                storage.remove(obj);
                length -= 1;
                modCount += 1;
                result = true;
            } else {
                result = false;
            }
        }
        return result;
    }

    /**
     * [FUNCTION] HashSetAutomaton::size(HashSet) -> int
     */
    public int size() {
        int result = 0;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            result = length;
        }
        return result;
    }

    /**
     * [FUNCTION] HashSetAutomaton::spliterator(HashSet) -> Spliterator
     */
    public Spliterator spliterator() {
        Spliterator result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            final Object[] keysStorageArray = new Object[length];
            final SymbolicMap<Object, Object> visitedKeys = Engine.makeSymbolicMap();
            int i = 0;
            for (i = 0; i < length; i += 1) {
                final Object key = _generateKey(visitedKeys);
                keysStorageArray[i] = key;
                visitedKeys.set(key, LibSLGlobals.HASHSET_VALUE);
            }
            ;
            result = new HashSet_KeySpliterator((Void) null, 
            /* state = */ HashSet_KeySpliterator.__$lsl_States.Initialized, 
            /* keysStorage = */ keysStorageArray, 
            /* index = */ 0, 
            /* fence = */ -1, 
            /* est = */ 0, 
            /* expectedModCount = */ modCount, 
            /* parent = */ this);
        }
        return result;
    }

    /**
     * [FUNCTION] HashSetAutomaton::equals(HashSet, Object) -> boolean
     */
    public boolean equals(Object other) {
        boolean result = false;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            if (other == this) {
                result = true;
            } else {
                final boolean isSameType = Engine.typeEquals(this, other);
                if (isSameType) {
                    final int expectedModCount = modCount;
                    final int otherExpectedModCount = ((HashSet) other).modCount;
                    final SymbolicMap<Object, Object> otherStorage = ((HashSet) other).storage;
                    final int otherLength = ((HashSet) other).length;
                    if (length == otherLength) {
                        result = LibSLRuntime.equals(storage, otherStorage);
                    } else {
                        result = false;
                    }
                    ((HashSet) other)._checkForComodification(otherExpectedModCount);
                    _checkForComodification(expectedModCount);
                } else {
                    result = false;
                }
            }
        }
        return result;
    }

    /**
     * [FUNCTION] HashSetAutomaton::hashCode(HashSet) -> int
     */
    public int hashCode() {
        int result = 0;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            result = LibSLRuntime.hashCode(storage);
        }
        return result;
    }

    /**
     * [FUNCTION] HashSetAutomaton::removeAll(HashSet, Collection) -> boolean
     */
    public boolean removeAll(Collection c) {
        boolean result = false;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            if (c == null) {
                throw new NullPointerException();
            }
            final int expectedModCount = modCount;
            final int otherSize = c.size();
            final Iterator iter = c.iterator();
            final int lengthBeforeRemoving = length;
            int i = 0;
            if (length > otherSize) {
                while (iter.hasNext()) {
                    final Object key = iter.next();
                    final boolean isKeyExist = storage.containsKey(key);
                    if (isKeyExist) {
                        storage.remove(key);
                        length -= 1;
                    }
                }
                ;
            } else {
                final SymbolicMap<Object, Object> visitedKeys = Engine.makeSymbolicMap();
                while (i < length) {
                    final Object key = _generateKey(visitedKeys);
                    final boolean isCollectionContainsKey = c.contains(key);
                    if (isCollectionContainsKey) {
                        storage.remove(key);
                        length -= 1;
                    }
                    visitedKeys.set(key, LibSLGlobals.HASHSET_VALUE);
                    i += 1;
                }
                ;
            }
            _checkForComodification(expectedModCount);
            modCount += 1;
            result = lengthBeforeRemoving != length;
        }
        return result;
    }

    /**
     * [FUNCTION] HashSetAutomaton::toArray(HashSet) -> array<Object>
     */
    public Object[] toArray() {
        Object[] result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            final int len = length;
            result = new Object[len];
            final int expectedModCount = modCount;
            final SymbolicMap<Object, Object> visitedKeys = Engine.makeSymbolicMap();
            int i = 0;
            for (i = 0; i < len; i += 1) {
                final Object key = _generateKey(visitedKeys);
                result[i] = key;
                visitedKeys.set(key, LibSLGlobals.HASHSET_VALUE);
            }
            ;
            _checkForComodification(expectedModCount);
        }
        return result;
    }

    /**
     * [FUNCTION] HashSetAutomaton::toArray(HashSet, array<Object>) -> array<Object>
     */
    public Object[] toArray(Object[] a) {
        Object[] result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            final int expectedModCount = modCount;
            final int aLen = a.length;
            final int len = length;
            final SymbolicMap<Object, Object> visitedKeys = Engine.makeSymbolicMap();
            int i = 0;
            if (aLen < len) {
                a = new Object[len];
            }
            result = a;
            for (i = 0; i < len; i += 1) {
                final Object key = _generateKey(visitedKeys);
                result[i] = key;
                visitedKeys.set(key, LibSLGlobals.HASHSET_VALUE);
            }
            ;
            if (aLen > length) {
                result[length] = null;
            }
            _checkForComodification(expectedModCount);
        }
        return result;
    }

    /**
     * [FUNCTION] HashSetAutomaton::containsAll(HashSet, Collection) -> boolean
     */
    public boolean containsAll(Collection c) {
        boolean result = false;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            final int otherSize = c.size();
            final Iterator iter = c.iterator();
            boolean isContainsAll = true;
            while (iter.hasNext()) {
                final Object key = iter.next();
                final boolean isKeyExist = storage.containsKey(key);
                if (!isKeyExist) {
                    isContainsAll = false;
                    break;
                }
            }
            ;
            result = isContainsAll;
        }
        return result;
    }

    /**
     * [FUNCTION] HashSetAutomaton::addAll(HashSet, Collection) -> boolean
     */
    public boolean addAll(Collection c) {
        boolean result = false;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            result = _addAllElements(c);
        }
        return result;
    }

    /**
     * [FUNCTION] HashSetAutomaton::retainAll(HashSet, Collection) -> boolean
     */
    public boolean retainAll(Collection c) {
        boolean result = false;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            if (c == null) {
                throw new NullPointerException();
            }
            final int lengthBeforeAdd = length;
            final Iterator iter = c.iterator();
            while (iter.hasNext()) {
                final Object key = iter.next();
                final boolean hasKey = storage.containsKey(key);
                if (!hasKey) {
                    storage.remove(key);
                    length -= 1;
                }
            }
            ;
            if (lengthBeforeAdd != length) {
                modCount += 1;
                result = true;
            } else {
                result = false;
            }
        }
        return result;
    }

    /**
     * [FUNCTION] HashSetAutomaton::removeIf(HashSet, Predicate) -> boolean
     */
    public boolean removeIf(Predicate filter) {
        boolean result = false;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            if (filter == null) {
                throw new NullPointerException();
            }
            final int lengthBeforeAdd = length;
            final int expectedModCount = modCount;
            int i = 0;
            final SymbolicMap<Object, Object> visitedKeys = Engine.makeSymbolicMap();
            while (i < lengthBeforeAdd) {
                final Object key = _generateKey(visitedKeys);
                boolean isDelete = filter.test(key);
                if (isDelete) {
                    storage.remove(key);
                    length -= 1;
                }
                i += 1;
                visitedKeys.set(key, LibSLGlobals.HASHSET_VALUE);
            }
            ;
            _checkForComodification(expectedModCount);
            if (lengthBeforeAdd != length) {
                modCount += 1;
                result = true;
            } else {
                result = false;
            }
        }
        return result;
    }

    /**
     * [FUNCTION] HashSetAutomaton::forEach(HashSet, Consumer) -> void
     */
    public void forEach(Consumer userAction) {
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            if (userAction == null) {
                throw new NullPointerException();
            }
            int i = 0;
            final int expectedModCount = modCount;
            final SymbolicMap<Object, Object> visitedKeys = Engine.makeSymbolicMap();
            while (i < length) {
                final Object key = _generateKey(visitedKeys);
                userAction.accept(key);
                i += 1;
                visitedKeys.set(key, LibSLGlobals.HASHSET_VALUE);
            }
            ;
            _checkForComodification(expectedModCount);
        }
    }

    /**
     * [FUNCTION] HashSetAutomaton::stream(HashSet) -> Stream
     */
    public Stream stream() {
        Stream result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            result = Engine.makeSymbolic(Stream.class);
            Engine.assume(result != null);
        }
        return result;
    }

    /**
     * [FUNCTION] HashSetAutomaton::parallelStream(HashSet) -> Stream
     */
    public Stream parallelStream() {
        Stream result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            result = Engine.makeSymbolic(Stream.class);
            Engine.assume(result != null);
        }
        return result;
    }

    /**
     * [FUNCTION] HashSetAutomaton::writeObject(HashSet, ObjectOutputStream) -> void
     */
    private void writeObject(ObjectOutputStream s) throws java.io.IOException {
        /* body */ {
            LibSLRuntime.not_implemented(/* no serialization support yet */);
        }
    }

    /**
     * [FUNCTION] HashSetAutomaton::readObject(HashSet, ObjectInputStream) -> void
     */
    private void readObject(ObjectInputStream s) throws java.io.IOException,
            java.lang.ClassNotFoundException {
        /* body */ {
            LibSLRuntime.not_implemented(/* no serialization support yet */);
        }
    }

    public static final class __$lsl_States {
        public static final byte Allocated = (byte) 0;

        public static final byte Initialized = (byte) 1;
    }

    @Approximate(HashSet.class)
    public static final class __hook {
        private __hook(Void o1, Void o2) {
            Engine.assume(false);
        }
    }
}
