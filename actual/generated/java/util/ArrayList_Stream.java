// Generated by the LibSL translator.  DO NOT EDIT!
// source: ?
//
package generated.java.util;

import java.util.Comparator;
import java.util.Iterator;
import java.util.Spliterator;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.BinaryOperator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.IntFunction;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.function.ToDoubleFunction;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;
import java.util.stream.BaseStream;
import java.util.stream.Collector;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import java.util.stream.Stream;
import org.jacodb.approximation.annotation.Approximate;
import org.usvm.api.Engine;
import runtime.LibSLRuntime;

/**
 * ArrayList_StreamAutomaton for ArrayList_Stream ~> java.util.ArrayList_Stream
 */
@Approximate(java.util.ArrayList_Stream.class)
public final class ArrayList_Stream implements LibSLRuntime.Automaton, Stream {
    public LibSLRuntime.Token __$lsl_token = null;

    public byte __$lsl_state = __$lsl_States.Initialized;

    @LibSLRuntime.AutomatonConstructor
    public ArrayList_Stream(final LibSLRuntime.Token __$lsl_token, final byte __$lsl_state) {
        this.__$lsl_token = __$lsl_token;
        this.__$lsl_state = __$lsl_state;
    }

    @LibSLRuntime.AutomatonConstructor
    public ArrayList_Stream(final LibSLRuntime.Token __$lsl_token) {
        this(__$lsl_token, __$lsl_States.Initialized);
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::allMatch(ArrayList_Stream, Predicate) -> boolean
     */
    public boolean allMatch(Predicate predicate) {
        boolean result = false;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::anyMatch(ArrayList_Stream, Predicate) -> boolean
     */
    public boolean anyMatch(Predicate predicate) {
        boolean result = false;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::close(ArrayList_Stream) -> void
     */
    public void close() {
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::collect(ArrayList_Stream, Collector) -> Object
     */
    public Object collect(Collector collector) {
        Object result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::collect(ArrayList_Stream, Supplier, BiConsumer, BiConsumer) -> Object
     */
    public Object collect(Supplier supplier, BiConsumer accumulator, BiConsumer combiner) {
        Object result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::count(ArrayList_Stream) -> long
     */
    public long count() {
        long result = 0L;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::distinct(ArrayList_Stream) -> Stream
     */
    public Stream distinct() {
        Stream result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::dropWhile(ArrayList_Stream, Predicate) -> Stream
     */
    public Stream dropWhile(Predicate predicate) {
        Stream result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::equals(ArrayList_Stream, Object) -> boolean
     */
    public boolean equals(Object obj) {
        boolean result = false;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::filter(ArrayList_Stream, Predicate) -> Stream
     */
    public Stream filter(Predicate predicate) {
        Stream result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::findAny(ArrayList_Stream) -> Optional
     */
    public Optional findAny() {
        Optional result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::findFirst(ArrayList_Stream) -> Optional
     */
    public Optional findFirst() {
        Optional result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::flatMap(ArrayList_Stream, Function) -> Stream
     */
    public Stream flatMap(Function mapper) {
        Stream result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::flatMapToDouble(ArrayList_Stream, Function) -> DoubleStream
     */
    public DoubleStream flatMapToDouble(Function mapper) {
        DoubleStream result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::flatMapToInt(ArrayList_Stream, Function) -> IntStream
     */
    public IntStream flatMapToInt(Function mapper) {
        IntStream result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::flatMapToLong(ArrayList_Stream, Function) -> LongStream
     */
    public LongStream flatMapToLong(Function mapper) {
        LongStream result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::forEach(ArrayList_Stream, Consumer) -> void
     */
    public void forEach(Consumer _action) {
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::forEachOrdered(ArrayList_Stream, Consumer) -> void
     */
    public void forEachOrdered(Consumer _action) {
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::hashCode(ArrayList_Stream) -> int
     */
    public int hashCode() {
        int result = 0;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::isParallel(ArrayList_Stream) -> boolean
     */
    public boolean isParallel() {
        boolean result = false;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::iterator(ArrayList_Stream) -> Iterator
     */
    public Iterator iterator() {
        Iterator result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::limit(ArrayList_Stream, long) -> Stream
     */
    public Stream limit(long maxSize) {
        Stream result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::map(ArrayList_Stream, Function) -> Stream
     */
    public Stream map(Function mapper) {
        Stream result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::mapToDouble(ArrayList_Stream, ToDoubleFunction) -> DoubleStream
     */
    public DoubleStream mapToDouble(ToDoubleFunction mapper) {
        DoubleStream result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::mapToInt(ArrayList_Stream, ToIntFunction) -> IntStream
     */
    public IntStream mapToInt(ToIntFunction mapper) {
        IntStream result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::mapToLong(ArrayList_Stream, ToLongFunction) -> LongStream
     */
    public LongStream mapToLong(ToLongFunction mapper) {
        LongStream result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::max(ArrayList_Stream, Comparator) -> Optional
     */
    public Optional max(Comparator comparator) {
        Optional result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::min(ArrayList_Stream, Comparator) -> Optional
     */
    public Optional min(Comparator comparator) {
        Optional result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::noneMatch(ArrayList_Stream, Predicate) -> boolean
     */
    public boolean noneMatch(Predicate predicate) {
        boolean result = false;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::onClose(ArrayList_Stream, Runnable) -> BaseStream
     */
    public BaseStream onClose(Runnable closeHandler) {
        BaseStream result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::parallel(ArrayList_Stream) -> BaseStream
     */
    public BaseStream parallel() {
        BaseStream result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::peek(ArrayList_Stream, Consumer) -> Stream
     */
    public Stream peek(Consumer _action) {
        Stream result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::reduce(ArrayList_Stream, BinaryOperator) -> Optional
     */
    public Optional reduce(BinaryOperator accumulator) {
        Optional result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::reduce(ArrayList_Stream, Object, BiFunction, BinaryOperator) -> Object
     */
    public Object reduce(Object identity, BiFunction accumulator, BinaryOperator combiner) {
        Object result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::reduce(ArrayList_Stream, Object, BinaryOperator) -> Object
     */
    public Object reduce(Object identity, BinaryOperator accumulator) {
        Object result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::sequential(ArrayList_Stream) -> BaseStream
     */
    public BaseStream sequential() {
        BaseStream result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::skip(ArrayList_Stream, long) -> Stream
     */
    public Stream skip(long n) {
        Stream result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::sorted(ArrayList_Stream) -> Stream
     */
    public Stream sorted() {
        Stream result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::sorted(ArrayList_Stream, Comparator) -> Stream
     */
    public Stream sorted(Comparator comparator) {
        Stream result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::spliterator(ArrayList_Stream) -> Spliterator
     */
    public Spliterator spliterator() {
        Spliterator result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::takeWhile(ArrayList_Stream, Predicate) -> Stream
     */
    public Stream takeWhile(Predicate predicate) {
        Stream result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::toArray(ArrayList_Stream) -> array<Object>
     */
    public Object[] toArray() {
        Object[] result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::toArray(ArrayList_Stream, IntFunction) -> array<Object>
     */
    public Object[] toArray(IntFunction generator) {
        Object[] result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::toString(ArrayList_Stream) -> String
     */
    public String toString() {
        String result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] ArrayList_StreamAutomaton::unordered(ArrayList_Stream) -> Stream
     */
    public Stream unordered() {
        Stream result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    public static final class __$lsl_States {
        public static final byte Initialized = (byte) 0;
    }

    @Approximate(ArrayList_Stream.class)
    public static final class __hook {
        private __hook(Void o) {
            Engine.assume(false);
        }
    }
}
