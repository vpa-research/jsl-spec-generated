// Generated by the LibSL translator.  DO NOT EDIT!
// source: java/util/OptionalLong.lsl
//
package actual.java.util;

import java.util.function.LongConsumer;
import java.util.function.LongSupplier;
import java.util.function.Supplier;
import java.util.stream.LongStream;
import org.usvm.api.Engine;
import runtime.LibSLGlobals;
import runtime.LibSLRuntime;

public final class OptionalLongAutomaton implements LibSLRuntime.Automaton {
    public __$lsl_States __$lsl_state = __$lsl_States.Allocated;

    private long value = 0L;

    private boolean present = false;

    @LibSLRuntime.AutomatonConstructor
    public OptionalLongAutomaton(__$lsl_States __$lsl_state, long value, boolean present) {
        this.__$lsl_state = __$lsl_state;
        this.value = value;
        this.present = present;
    }

    @LibSLRuntime.AutomatonConstructor
    public OptionalLongAutomaton() {
        this(__$lsl_States.Allocated, 0L, false);
    }

    public void OptionalLong(OptionalLong self) {
        Engine.assume(this.__$lsl_state == __$lsl_States.Allocated);
        /* body */ {
            LibSLRuntime.error("Private constructor call");
        }
        this.__$lsl_state = __$lsl_States.Initialized;
    }

    public void OptionalLong(OptionalLong self, long x) {
        Engine.assume(this.__$lsl_state == __$lsl_States.Allocated);
        /* body */ {
            LibSLRuntime.error("Private constructor call");
        }
        this.__$lsl_state = __$lsl_States.Initialized;
    }

    public static void _throwNPE() {
        /* body */ {
            throw new java.lang.NullPointerException();
        }
    }

    public static OptionalLong empty() {
        OptionalLong result;
        // WARNING: no state checks in static context
        /* body */ {
            result = LibSLGlobals.EMPTY_OPTIONAL_LONG;
        }
        // WARNING: no state transitions in static context
        return result;
    }

    public static OptionalLong of(long x) {
        OptionalLong result;
        // WARNING: no state checks in static context
        /* body */ {
            result = new OptionalLong(new OptionalLongAutomaton(OptionalLongAutomaton.__$lsl_States.Initialized, x, true));
        }
        // WARNING: no state transitions in static context
        return result;
    }

    public boolean equals(OptionalLong self, Object other) {
        boolean result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            if (other == self) {
                result = true;
            } else {
                final boolean isSameType = Engine.isSameType(self, other);
                if (isSameType) {
                    final long otherValue = LibSLRuntime.getAutomatonFrom(other, OptionalLongAutomaton.class).value;
                    final boolean otherPresent = LibSLRuntime.getAutomatonFrom(other, OptionalLongAutomaton.class).present;
                    if (this.present && otherPresent) {
                        result = this.value == otherValue;
                    } else {
                        result = this.present == otherPresent;
                    }
                } else {
                    result = false;
                }
            }
        }
        return result;
    }

    public long getAsLong(OptionalLong self) {
        long result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            if (!this.present) {
                throw new java.util.NoSuchElementException("No value present");
            }
            result = this.value;
        }
        return result;
    }

    public int hashCode(OptionalLong self) {
        int result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            if (this.present) {
                result = Engine.hashCode(this.value);
            } else {
                result = 0;
            }
        }
        return result;
    }

    public void ifPresent(OptionalLong self, LongConsumer consumer) {
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            if (this.present) {
                if (consumer == null) {
                    throw new java.lang.NullPointerException();
                }
                consumer.accept(this.value);
            }
        }
    }

    public void ifPresentOrElse(OptionalLong self, LongConsumer consumer, Runnable emptyAction) {
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            if (this.present) {
                if (consumer == null) {
                    throw new java.lang.NullPointerException();
                }
                consumer.accept(this.value);
            } else {
                if (emptyAction == null) {
                    throw new java.lang.NullPointerException();
                }
                emptyAction.run();
            }
        }
    }

    public boolean isEmpty(OptionalLong self) {
        boolean result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            result = !this.present;
        }
        return result;
    }

    public boolean isPresent(OptionalLong self) {
        boolean result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            result = this.present;
        }
        return result;
    }

    public long orElse(OptionalLong self, long other) {
        long result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            if (this.present) {
                result = this.value;
            } else {
                result = other;
            }
        }
        return result;
    }

    public long orElseGet(OptionalLong self, LongSupplier supplier) {
        long result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            if (supplier == null) {
                throw new java.lang.NullPointerException();
            }
            if (this.present) {
                result = this.value;
            } else {
                result = supplier.get();
            }
        }
        return result;
    }

    public long orElseThrow(OptionalLong self) {
        long result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            if (!this.present) {
                throw new java.util.NoSuchElementException("No value present");
            }
            result = this.value;
        }
        return result;
    }

    public <X extends java.lang.Throwable> long orElseThrow(OptionalLong self,
            Supplier<? extends X> exceptionSupplier) throws X {
        long result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            if (exceptionSupplier == null) {
                throw new java.lang.NullPointerException();
            }
            if (!this.present) {
                final Object exception = exceptionSupplier.get();
                throw ((Throwable) exception);
            } else {
                result = this.value;
            }
        }
        return result;
    }

    public LongStream stream(OptionalLong self) {
        LongStream result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.not_implemented();
        }
        return result;
    }

    public String toString(OptionalLong self) {
        String result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            if (this.present) {
                final String valueStr = Engine.toString(this.value);
                result = "OptionalLong[" + valueStr + "]";
            } else {
                result = "OptionalLong.empty";
            }
        }
        return result;
    }

    public enum __$lsl_States {
        Allocated,

        Initialized
    }
}
