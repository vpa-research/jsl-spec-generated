// Generated by the LibSL translator.  DO NOT EDIT!
// sources:
//  - java/util/LinkedList.lsl:44
//  - java/util/LinkedList.DescendingIterator.lsl:17
//
package generated.java.util;

import java.lang.IllegalStateException;
import java.lang.NullPointerException;
import java.lang.Object;
import java.lang.SuppressWarnings;
import java.lang.Void;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.jacodb.approximation.annotation.Approximate;
import org.usvm.api.Engine;
import org.usvm.api.SymbolicList;
import runtime.LibSLRuntime;

/**
 * LinkedList_DescendingIteratorAutomaton for LinkedList_DescendingIterator ~> java.util.LinkedList_DescendingIterator
 */
@SuppressWarnings({"all", "unchecked"})
@Approximate(stub.java.util.LinkedList_DescendingIterator.class)
public final class LinkedList_DescendingIterator implements LibSLRuntime.Automaton, Iterator {
    static {
        Engine.assume(true);
    }

    public LinkedList parent;

    public int cursor;

    public int expectedModCount;

    public int lastRet;

    @LibSLRuntime.AutomatonConstructor
    public LinkedList_DescendingIterator(Void __$lsl_token, final byte p0, final LinkedList p1,
            final int p2, final int p3, final int p4) {
        this.parent = p1;
        this.cursor = p2;
        this.expectedModCount = p3;
        this.lastRet = p4;
    }

    @LibSLRuntime.AutomatonConstructor
    public LinkedList_DescendingIterator(final Void __$lsl_token) {
        this(__$lsl_token, __$lsl_States.Initialized, null, 0, 0, -1);
    }

    /**
     * [FUNCTION] LinkedList_DescendingIteratorAutomaton::hasNext(LinkedList_DescendingIterator) -> boolean
     * Source: java/util/LinkedList.DescendingIterator.lsl:59
     */
    public boolean hasNext() {
        boolean result = false;
        /* body */ {
            Engine.assume(this.parent != null);
            result = this.cursor != 0;
        }
        return result;
    }

    /**
     * [FUNCTION] LinkedList_DescendingIteratorAutomaton::next(LinkedList_DescendingIterator) -> Object
     * Source: java/util/LinkedList.DescendingIterator.lsl:68
     */
    public Object next() {
        Object result = null;
        /* body */ {
            Engine.assume(this.parent != null);
            if (((LinkedList) ((Object) this.parent)).modCount != this.expectedModCount) {
                throw new ConcurrentModificationException();
            }
            final SymbolicList<Object> parentStorage = ((LinkedList) ((Object) this.parent)).storage;
            final int i = this.cursor - 1;
            if (i < 0) {
                throw new NoSuchElementException();
            }
            if (i >= parentStorage.size()) {
                throw new ConcurrentModificationException();
            }
            this.cursor = i;
            this.lastRet = i;
            result = parentStorage.get(i);
        }
        return result;
    }

    /**
     * [FUNCTION] LinkedList_DescendingIteratorAutomaton::remove(LinkedList_DescendingIterator) -> void
     * Source: java/util/LinkedList.DescendingIterator.lsl:92
     */
    public void remove() {
        /* body */ {
            Engine.assume(this.parent != null);
            if (this.lastRet < 0) {
                throw new IllegalStateException();
            }
            if (((LinkedList) ((Object) this.parent)).modCount != this.expectedModCount) {
                throw new ConcurrentModificationException();
            }
            final SymbolicList<Object> pStorage = ((LinkedList) ((Object) this.parent)).storage;
            if (this.lastRet >= pStorage.size()) {
                throw new ConcurrentModificationException();
            } else {
                ((LinkedList) ((Object) this.parent)).modCount += 1;
                pStorage.remove(this.lastRet);
            }
            this.cursor = this.lastRet;
            this.lastRet = -1;
            this.expectedModCount = ((LinkedList) ((Object) this.parent)).modCount;
        }
    }

    /**
     * [FUNCTION] LinkedList_DescendingIteratorAutomaton::forEachRemaining(LinkedList_DescendingIterator, Consumer) -> void
     * Source: java/util/LinkedList.DescendingIterator.lsl:120
     */
    public void forEachRemaining(Consumer userAction) {
        /* body */ {
            Engine.assume(this.parent != null);
            if (userAction == null) {
                throw new NullPointerException();
            }
            int i = this.cursor;
            final SymbolicList<Object> es = ((LinkedList) ((Object) this.parent)).storage;
            final int size = es.size();
            if (i < size) {
                while ((i < size) && (((LinkedList) ((Object) this.parent)).modCount == this.expectedModCount)) {
                    final Object item = es.get(i);
                    userAction.accept(item);
                    i += 1;
                }
                ;
                this.cursor = i;
                this.lastRet = i - 1;
                if (((LinkedList) ((Object) this.parent)).modCount != this.expectedModCount) {
                    throw new ConcurrentModificationException();
                }
            }
        }
    }

    public static final class __$lsl_States {
        public static final byte Initialized = (byte) 0;
    }

    @Approximate(LinkedList_DescendingIterator.class)
    public static final class __hook {
        private __hook(Void o1, Void o2) {
            Engine.assume(false);
        }
    }
}
