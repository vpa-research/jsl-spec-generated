// Generated by the LibSL translator.  DO NOT EDIT!
// source: ?
//
package generated.java.nio.charset;

import java.lang.Comparable;
import java.lang.Object;
import java.lang.String;
import java.lang.Void;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.util.Locale;
import java.util.Set;
import java.util.SortedMap;
import org.jacodb.approximation.annotation.Approximate;
import org.usvm.api.Engine;
import runtime.LibSLRuntime;

/**
 * CharsetAutomaton for LSLCharset ~> java.nio.charset.Charset
 */
@Approximate(java.nio.charset.Charset.class)
public abstract class Charset implements LibSLRuntime.Automaton, Comparable<Charset> {
    static {
        Engine.assume(true);
    }

    private byte __$lsl_state = __$lsl_States.Allocated;

    @LibSLRuntime.AutomatonConstructor
    public Charset(Void __$lsl_token, final byte p0) {
        this.__$lsl_state = p0;
    }

    @LibSLRuntime.AutomatonConstructor
    public Charset(final Void __$lsl_token) {
        this(__$lsl_token, __$lsl_States.Allocated);
    }

    /**
     * [CONSTRUCTOR] CharsetAutomaton::LSLCharset(LSLCharset, String, array<String>) -> LSLCharset
     */
    protected Charset(String canonicalName, String[] aliases) {
        this((Void) null);
        Engine.assume(this.__$lsl_state == __$lsl_States.Allocated);
        /* body */ {
            LibSLRuntime.todo();
        }
        this.__$lsl_state = __$lsl_States.Initialized;
    }

    /**
     * [FUNCTION] CharsetAutomaton::availableCharsets() -> SortedMap
     */
    public static SortedMap availableCharsets() {
        SortedMap result = null;
        // WARNING: no state checks in static context
        /* body */ {
            LibSLRuntime.todo();
        }
        // WARNING: no state transitions in static context
        return result;
    }

    /**
     * [FUNCTION] CharsetAutomaton::defaultCharset() -> LSLCharset
     */
    public static Charset defaultCharset() {
        Charset result = null;
        // WARNING: no state checks in static context
        /* body */ {
            LibSLRuntime.todo();
        }
        // WARNING: no state transitions in static context
        return result;
    }

    /**
     * [FUNCTION] CharsetAutomaton::forName(String) -> LSLCharset
     */
    public static Charset forName(String charsetName) {
        Charset result = null;
        // WARNING: no state checks in static context
        /* body */ {
            LibSLRuntime.todo();
        }
        // WARNING: no state transitions in static context
        return result;
    }

    /**
     * [FUNCTION] CharsetAutomaton::isSupported(String) -> boolean
     */
    public static boolean isSupported(String charsetName) {
        boolean result = false;
        // WARNING: no state checks in static context
        /* body */ {
            LibSLRuntime.todo();
        }
        // WARNING: no state transitions in static context
        return result;
    }

    /**
     * [FUNCTION] CharsetAutomaton::aliases(LSLCharset) -> Set
     */
    public final Set aliases() {
        Set result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] CharsetAutomaton::canEncode(LSLCharset) -> boolean
     */
    public boolean canEncode() {
        boolean result = false;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            result = true;
        }
        return result;
    }

    /**
     * [FUNCTION] CharsetAutomaton::compareTo(LSLCharset, Charset) -> int
     */
    public final int compareTo(java.nio.charset.Charset that) {
        int result = 0;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] CharsetAutomaton::decode(LSLCharset, ByteBuffer) -> CharBuffer
     */
    public final CharBuffer decode(ByteBuffer bb) {
        CharBuffer result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] CharsetAutomaton::displayName(LSLCharset) -> String
     */
    public String displayName() {
        String result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] CharsetAutomaton::displayName(LSLCharset, Locale) -> String
     */
    public String displayName(Locale locale) {
        String result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] CharsetAutomaton::encode(LSLCharset, CharBuffer) -> ByteBuffer
     */
    public final ByteBuffer encode(CharBuffer cb) {
        ByteBuffer result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] CharsetAutomaton::encode(LSLCharset, String) -> ByteBuffer
     */
    public final ByteBuffer encode(String str) {
        ByteBuffer result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] CharsetAutomaton::equals(LSLCharset, Object) -> boolean
     */
    public final boolean equals(Object ob) {
        boolean result = false;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] CharsetAutomaton::hashCode(LSLCharset) -> int
     */
    public final int hashCode() {
        int result = 0;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] CharsetAutomaton::isRegistered(LSLCharset) -> boolean
     */
    public final boolean isRegistered() {
        boolean result = false;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] CharsetAutomaton::name(LSLCharset) -> String
     */
    public final String name() {
        String result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    /**
     * [FUNCTION] CharsetAutomaton::toString(LSLCharset) -> String
     */
    public final String toString() {
        String result = null;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    public static final class __$lsl_States {
        public static final byte Allocated = (byte) 0;

        public static final byte Initialized = (byte) 1;
    }

    @Approximate(Charset.class)
    public static final class __hook {
        private __hook(Void o1, Void o2) {
            Engine.assume(false);
        }
    }
}
