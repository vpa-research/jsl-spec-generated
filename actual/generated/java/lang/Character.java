// Generated by the LibSL translator.  DO NOT EDIT!
// sources:
//  - java/lang/Character.lsl:63
//  - java/lang/Character.patch.lsl:16
//
package generated.java.lang;

import java.io.Serializable;
import java.lang.Class;
import java.lang.Object;
import java.lang.SuppressWarnings;
import java.lang.Void;
import org.jacodb.approximation.annotation.Approximate;
import org.usvm.api.Engine;
import runtime.LibSLRuntime;

/**
 * CharacterAutomaton for LSLCharacter ~> java.lang.Character
 */
@SuppressWarnings({"all", "unchecked"})
@Approximate(java.lang.Character.class)
public final class Character implements LibSLRuntime.Automaton, Serializable {
    private static final long serialVersionUID = 3786198910865385080L;

    public static final int BYTES = 2;

    public static final int SIZE = 16;

    public static final Class TYPE = java.lang.Character.class;

    public static final byte COMBINING_SPACING_MARK = 8;

    public static final byte CONNECTOR_PUNCTUATION = 23;

    public static final byte CONTROL = 15;

    public static final byte CURRENCY_SYMBOL = 26;

    public static final byte DASH_PUNCTUATION = 20;

    public static final byte DECIMAL_DIGIT_NUMBER = 9;

    public static final byte DIRECTIONALITY_ARABIC_NUMBER = 6;

    public static final byte DIRECTIONALITY_BOUNDARY_NEUTRAL = 9;

    public static final byte DIRECTIONALITY_COMMON_NUMBER_SEPARATOR = 7;

    public static final byte DIRECTIONALITY_EUROPEAN_NUMBER = 3;

    public static final byte DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR = 4;

    public static final byte DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR = 5;

    public static final byte DIRECTIONALITY_FIRST_STRONG_ISOLATE = 21;

    public static final byte DIRECTIONALITY_LEFT_TO_RIGHT = 0;

    public static final byte DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING = 14;

    public static final byte DIRECTIONALITY_LEFT_TO_RIGHT_ISOLATE = 19;

    public static final byte DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE = 15;

    public static final byte DIRECTIONALITY_NONSPACING_MARK = 8;

    public static final byte DIRECTIONALITY_OTHER_NEUTRALS = 13;

    public static final byte DIRECTIONALITY_PARAGRAPH_SEPARATOR = 10;

    public static final byte DIRECTIONALITY_POP_DIRECTIONAL_FORMAT = 18;

    public static final byte DIRECTIONALITY_POP_DIRECTIONAL_ISOLATE = 22;

    public static final byte DIRECTIONALITY_RIGHT_TO_LEFT = 1;

    public static final byte DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC = 2;

    public static final byte DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING = 16;

    public static final byte DIRECTIONALITY_RIGHT_TO_LEFT_ISOLATE = 20;

    public static final byte DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE = 17;

    public static final byte DIRECTIONALITY_SEGMENT_SEPARATOR = 11;

    public static final byte DIRECTIONALITY_UNDEFINED = -1;

    public static final byte DIRECTIONALITY_WHITESPACE = 12;

    public static final byte ENCLOSING_MARK = 7;

    public static final byte END_PUNCTUATION = 22;

    public static final byte FINAL_QUOTE_PUNCTUATION = 30;

    public static final byte FORMAT = 16;

    public static final byte INITIAL_QUOTE_PUNCTUATION = 29;

    public static final byte LETTER_NUMBER = 10;

    public static final byte LINE_SEPARATOR = 13;

    public static final byte LOWERCASE_LETTER = 2;

    public static final byte MATH_SYMBOL = 25;

    public static final char MAX_HIGH_SURROGATE = ((char) 56319);

    public static final char MAX_LOW_SURROGATE = ((char) 57343);

    public static final int MAX_RADIX = 36;

    public static final char MAX_SURROGATE = 57343;

    public static final int MIN_CODE_POINT = 0;

    public static final int MAX_CODE_POINT = 1114111;

    public static final char MIN_VALUE = ((char) 0);

    public static final char MAX_VALUE = ((char) 65535);

    public static final char MIN_HIGH_SURROGATE = ((char) 55296);

    public static final char MIN_LOW_SURROGATE = ((char) 56320);

    public static final int MIN_RADIX = 2;

    public static final int MIN_SUPPLEMENTARY_CODE_POINT = 65536;

    public static final char MIN_SURROGATE = ((char) 55296);

    public static final byte MODIFIER_LETTER = 4;

    public static final byte MODIFIER_SYMBOL = 27;

    public static final byte NON_SPACING_MARK = 6;

    public static final byte OTHER_LETTER = 5;

    public static final byte OTHER_NUMBER = 11;

    public static final byte OTHER_PUNCTUATION = 24;

    public static final byte OTHER_SYMBOL = 28;

    public static final byte PARAGRAPH_SEPARATOR = 14;

    public static final byte PRIVATE_USE = 18;

    public static final byte SPACE_SEPARATOR = 12;

    public static final byte START_PUNCTUATION = 21;

    public static final byte SURROGATE = 19;

    public static final byte TITLECASE_LETTER = 3;

    public static final byte UNASSIGNED = 0;

    public static final byte UPPERCASE_LETTER = 1;

    private static final char CHAR_SN = ((char) 10);

    private static final char CHAR_ST = ((char) 9);

    private static final char CHAR_SF = ((char) 12);

    private static final char CHAR_SR = ((char) 13);

    static {
        Engine.assume(true);
    }

    public char value;

    @LibSLRuntime.AutomatonConstructor
    public Character(Void __$lsl_token, final byte p0, final char p1) {
        this.value = p1;
    }

    @LibSLRuntime.AutomatonConstructor
    public Character(final Void __$lsl_token) {
        this(__$lsl_token, __$lsl_States.Initialized, '?');
    }

    /**
     * [CONSTRUCTOR] CharacterAutomaton::<init>(LSLCharacter, char) -> void
     * Source: java/lang/Character.patch.lsl:46
     */
    public Character(char c) {
        this((Void) null);
        /* body */ {
            this.value = c;
        }
    }

    /**
     * [FUNCTION] CharacterAutomaton::isWhitespace(char) -> boolean
     * Source: java/lang/Character.patch.lsl:54
     */
    public static boolean isWhitespace(char ch) {
        boolean result = false;
        /* body */ {
            if ((ch == ' ') || (ch == CHAR_SN) || (ch == CHAR_ST) || (ch == CHAR_SF) || (ch == CHAR_SR)) {
                result = true;
            } else {
                result = false;
            }
        }
        return result;
    }

    /**
     * [FUNCTION] CharacterAutomaton::toLowerCase(char) -> char
     * Source: java/lang/Character.patch.lsl:64
     */
    public static char toLowerCase(char ch) {
        char result = '?';
        /* body */ {
            if ((ch >= 'A') && (ch <= 'Z')) {
                result = ((char) ((ch - 'A') + 'a'));
            } else {
                result = ch;
            }
        }
        return result;
    }

    /**
     * [FUNCTION] CharacterAutomaton::toUpperCase(char) -> char
     * Source: java/lang/Character.patch.lsl:73
     */
    public static char toUpperCase(char ch) {
        char result = '?';
        /* body */ {
            if ((ch >= 'a') && (ch <= 'z')) {
                result = ((char) ((ch - 'a') + 'A'));
            } else {
                result = ch;
            }
        }
        return result;
    }

    /**
     * [FUNCTION] CharacterAutomaton::valueOf(char) -> Character
     * Source: java/lang/Character.patch.lsl:82
     */
    public static java.lang.Character valueOf(char c) {
        java.lang.Character result = null;
        /* body */ {
            result = (java.lang.Character) ((Object) new Character((Void) null, 
                /* state = */ Character.__$lsl_States.Initialized, 
                /* value = */ c
            ));
        }
        return result;
    }

    /**
     * [FUNCTION] CharacterAutomaton::charValue(LSLCharacter) -> char
     * Source: java/lang/Character.patch.lsl:92
     */
    public char charValue() {
        char result = '?';
        /* body */ {
            result = this.value;
        }
        return result;
    }

    public static final class __$lsl_States {
        public static final byte Initialized = (byte) 0;
    }

    @Approximate(Character.class)
    public static final class __hook {
        private __hook(Void o1, Void o2) {
            Engine.assume(false);
        }
    }
}
