// Generated by the LibSL translator.  DO NOT EDIT!
// sources:
//  - java/lang/StringBuffer.lsl:18
//  - java/lang/StringBuffer.main.lsl:20
//
package generated.java.lang;

import java.io.Serializable;
import java.lang.CharSequence;
import java.lang.Character;
import java.lang.Comparable;
import java.lang.IllegalArgumentException;
import java.lang.IndexOutOfBoundsException;
import java.lang.NegativeArraySizeException;
import java.lang.NullPointerException;
import java.lang.Object;
import java.lang.OutOfMemoryError;
import java.lang.String;
import java.lang.StringIndexOutOfBoundsException;
import java.lang.SuppressWarnings;
import java.lang.Void;
import java.util.stream.IntStream;
import org.jacodb.approximation.annotation.Approximate;
import org.usvm.api.Engine;
import runtime.LibSLRuntime;
import stub.java.util.stream.IntStreamLSL;

/**
 * StringBufferAutomaton for StringBuffer ~> java.lang.StringBuffer
 */
@SuppressWarnings({"all", "unchecked"})
@Approximate(java.lang.StringBuffer.class)
public final class StringBuffer implements LibSLRuntime.Automaton, Serializable, Comparable<StringBuffer>, CharSequence {
    private static final long serialVersionUID = 3388685877147921107L;

    private static final int STRINGBUFFER_LENGTH_MAX = 50;

    static {
        Engine.assume(true);
    }

    public char[] value;

    public int count;

    @LibSLRuntime.AutomatonConstructor
    public StringBuffer(Void __$lsl_token, final byte p0, final char[] p1, final int p2) {
        this.value = p1;
        this.count = p2;
    }

    @LibSLRuntime.AutomatonConstructor
    public StringBuffer(final Void __$lsl_token) {
        this(__$lsl_token, __$lsl_States.Initialized, null, 0);
    }

    /**
     * [CONSTRUCTOR] StringBufferAutomaton::<init>(StringBuffer) -> void
     * Source: java/lang/StringBuffer.main.lsl:238
     */
    public StringBuffer() {
        this((Void) null);
        /* body */ {
            this.value = new char[STRINGBUFFER_LENGTH_MAX];
        }
    }

    /**
     * [CONSTRUCTOR] StringBufferAutomaton::<init>(StringBuffer, CharSequence) -> void
     * Source: java/lang/StringBuffer.main.lsl:244
     */
    public StringBuffer(CharSequence seq) {
        this((Void) null);
        /* body */ {
            if (seq == null) {
                throw new NullPointerException();
            }
            this.value = new char[STRINGBUFFER_LENGTH_MAX];
            _appendCharSequence(seq, 0, seq.length());
        }
    }

    /**
     * [CONSTRUCTOR] StringBufferAutomaton::<init>(StringBuffer, String) -> void
     * Source: java/lang/StringBuffer.main.lsl:255
     */
    public StringBuffer(String str) {
        this((Void) null);
        /* body */ {
            if (str == null) {
                throw new NullPointerException();
            }
            this.value = new char[STRINGBUFFER_LENGTH_MAX];
            _appendCharSequence(str, 0, str.length());
        }
    }

    /**
     * [CONSTRUCTOR] StringBufferAutomaton::<init>(StringBuffer, int) -> void
     * Source: java/lang/StringBuffer.main.lsl:266
     */
    public StringBuffer(int cap) {
        this((Void) null);
        /* body */ {
            if (cap < 0) {
                throw new NegativeArraySizeException();
            }
            if (cap > 1073741823) {
                throw new OutOfMemoryError("Requested array size exceeds VM limit");
            }
            this.value = new char[STRINGBUFFER_LENGTH_MAX];
        }
    }

    /**
     * [SUBROUTINE] StringBufferAutomaton::_appendCharSequence(CharSequence, int, int) -> void
     * Source: java/lang/StringBuffer.main.lsl:117
     */
    private void _appendCharSequence(CharSequence seq, int seqStart, int seqEnd) {
        /* body */ {
            if ((seqStart < 0) || (seqStart > seqEnd) || (seqEnd > seq.length())) {
                throw new IndexOutOfBoundsException();
            }
            final int avaiable = this.value.length - this.count;
            int len = seqEnd - seqStart;
            if (len > avaiable) {
                len = avaiable;
            }
            if (len > 0) {
                String str = null;
                if ((seq instanceof String)) {
                    str = ((String) seq);
                } else {
                    str = LibSLRuntime.toString(seq);
                }
                final char[] chars = str.toCharArray();
                LibSLRuntime.ArrayActions.copy(chars, seqStart, this.value, this.count, len);
                this.count += len;
            }
        }
    }

    /**
     * [SUBROUTINE] StringBufferAutomaton::_asString(int, int) -> String
     * Source: java/lang/StringBuffer.main.lsl:146
     */
    private String _asString(int posStart, int posEnd) {
        String result = null;
        /* body */ {
            final int len = posEnd - posStart;
            if (len == 0) {
                result = "";
            } else {
                final char[] symbols = new char[len];
                LibSLRuntime.ArrayActions.copy(this.value, posStart, symbols, 0, len);
                result = LibSLRuntime.toString(this.value);
            }
        }
        return result;
    }

    /**
     * [SUBROUTINE] StringBufferAutomaton::_asString() -> String
     * Source: java/lang/StringBuffer.main.lsl:162
     */
    public String _asString() {
        String result = null;
        /* body */ {
            final int len = this.count;
            if (len == 0) {
                result = "";
            } else {
                if (len == this.value.length) {
                    result = LibSLRuntime.toString(this.value);
                } else {
                    final char[] symbols = new char[len];
                    LibSLRuntime.ArrayActions.copy(this.value, 0, symbols, 0, len);
                    result = LibSLRuntime.toString(this.value);
                }
            }
        }
        return result;
    }

    /**
     * [SUBROUTINE] StringBufferAutomaton::_insertCharSequence(int, CharSequence, int, int) -> void
     * Source: java/lang/StringBuffer.main.lsl:182
     */
    private void _insertCharSequence(int offset, CharSequence seq, int seqStart, int seqEnd) {
        /* body */ {
            if ((seqStart < 0) || (seqStart > seqEnd) || (seqEnd > seq.length()) || (offset > this.count)) {
                throw new IndexOutOfBoundsException();
            }
            final int avaiable = this.value.length - offset;
            int len = seqEnd - seqStart;
            if (len > avaiable) {
                len = avaiable;
            }
            if (len > 0) {
                final int avaiableForLeftovers = avaiable - len;
                if (avaiableForLeftovers > 0) {
                    int rightLeftovers = this.count - offset;
                    if (rightLeftovers > avaiableForLeftovers) {
                        rightLeftovers = avaiableForLeftovers;
                    }
                    if (rightLeftovers > 0) {
                        final int rightIndex = offset + 1;
                        LibSLRuntime.ArrayActions.copy(this.value, rightIndex, this.value, rightIndex + len, rightLeftovers);
                    }
                }
                String str = null;
                if ((seq instanceof String)) {
                    str = ((String) seq);
                } else {
                    str = LibSLRuntime.toString(seq);
                }
                final char[] chars = str.toCharArray();
                LibSLRuntime.ArrayActions.copy(chars, seqStart, this.value, offset, len);
                this.count += len;
            }
        }
    }

    /**
     * [SUBROUTINE] StringBufferAutomaton::_deleteChars(int, int) -> void
     * Source: java/lang/StringBuffer.main.lsl:223
     */
    private void _deleteChars(int start, int end) {
        /* body */ {
            if ((start < 0) || (start > end) || (end > this.count)) {
                throw new IndexOutOfBoundsException();
            }
            final int leftovers = this.count - end;
            if (leftovers > 0) {
                LibSLRuntime.ArrayActions.copy(this.value, end, this.value, start, leftovers);
            }
            this.count -= end - start;
        }
    }

    /**
     * [FUNCTION] StringBufferAutomaton::append(StringBuffer, CharSequence) -> StringBuffer
     * Source: java/lang/StringBuffer.main.lsl:281
     */
    public synchronized StringBuffer append(CharSequence seq) {
        StringBuffer result = null;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            if (seq == null) {
                _appendCharSequence("null", 0, 4);
            } else {
                _appendCharSequence(seq, 0, seq.length());
            }
            result = this;
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::append(StringBuffer, CharSequence, int, int) -> StringBuffer
     * Source: java/lang/StringBuffer.main.lsl:294
     */
    public synchronized StringBuffer append(CharSequence seq, int start, int end) {
        StringBuffer result = null;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            if (seq == null) {
                _appendCharSequence("null", start, end);
            } else {
                _appendCharSequence(seq, start, end);
            }
            result = this;
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::append(StringBuffer, Object) -> StringBuffer
     * Source: java/lang/StringBuffer.main.lsl:307
     */
    public synchronized StringBuffer append(Object obj) {
        StringBuffer result = null;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            if (obj == null) {
                _appendCharSequence("null", 0, 4);
            } else {
                final String seq = LibSLRuntime.toString(obj);
                _appendCharSequence(seq, 0, seq.length());
            }
            result = this;
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::append(StringBuffer, String) -> StringBuffer
     * Source: java/lang/StringBuffer.main.lsl:325
     */
    public synchronized StringBuffer append(String str) {
        StringBuffer result = null;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            if (str == null) {
                _appendCharSequence("null", 0, 4);
            } else {
                _appendCharSequence(str, 0, str.length());
            }
            result = this;
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::append(StringBuffer, StringBuffer) -> StringBuffer
     * Source: java/lang/StringBuffer.main.lsl:338
     */
    public synchronized StringBuffer append(StringBuffer sb) {
        StringBuffer result = null;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            if (sb == null) {
                _appendCharSequence("null", 0, 4);
            } else {
                final String seq = LibSLRuntime.toString(sb);
                _appendCharSequence(seq, 0, seq.length());
            }
            result = this;
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::append(StringBuffer, boolean) -> StringBuffer
     * Source: java/lang/StringBuffer.main.lsl:356
     */
    public synchronized StringBuffer append(boolean x) {
        StringBuffer result = null;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            if (x) {
                _appendCharSequence("true", 0, 4);
            } else {
                _appendCharSequence("false", 0, 5);
            }
            result = this;
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::append(StringBuffer, char) -> StringBuffer
     * Source: java/lang/StringBuffer.main.lsl:369
     */
    public synchronized StringBuffer append(char x) {
        StringBuffer result = null;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            if (this.count < this.value.length) {
                value[this.count] = x;
                this.count += 1;
            }
            result = this;
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::append(StringBuffer, array<char>) -> StringBuffer
     * Source: java/lang/StringBuffer.main.lsl:383
     */
    public synchronized StringBuffer append(char[] str) {
        StringBuffer result = null;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            final String seq = LibSLRuntime.toString(str);
            _appendCharSequence(seq, 0, seq.length());
            result = this;
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::append(StringBuffer, array<char>, int, int) -> StringBuffer
     * Source: java/lang/StringBuffer.main.lsl:394
     */
    public synchronized StringBuffer append(char[] str, int offset, int len) {
        StringBuffer result = null;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            final String seq = LibSLRuntime.toString(str);
            _appendCharSequence(seq, offset, len);
            result = this;
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::append(StringBuffer, double) -> StringBuffer
     * Source: java/lang/StringBuffer.main.lsl:405
     */
    public synchronized StringBuffer append(double x) {
        StringBuffer result = null;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            final String seq = LibSLRuntime.toString(x);
            _appendCharSequence(seq, 0, seq.length());
            result = this;
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::append(StringBuffer, float) -> StringBuffer
     * Source: java/lang/StringBuffer.main.lsl:416
     */
    public synchronized StringBuffer append(float x) {
        StringBuffer result = null;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            final String seq = LibSLRuntime.toString(x);
            _appendCharSequence(seq, 0, seq.length());
            result = this;
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::append(StringBuffer, int) -> StringBuffer
     * Source: java/lang/StringBuffer.main.lsl:427
     */
    public synchronized StringBuffer append(int x) {
        StringBuffer result = null;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            final String seq = LibSLRuntime.toString(x);
            _appendCharSequence(seq, 0, seq.length());
            result = this;
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::append(StringBuffer, long) -> StringBuffer
     * Source: java/lang/StringBuffer.main.lsl:438
     */
    public synchronized StringBuffer append(long x) {
        StringBuffer result = null;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            final String seq = LibSLRuntime.toString(x);
            _appendCharSequence(seq, 0, seq.length());
            result = this;
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::appendCodePoint(StringBuffer, int) -> StringBuffer
     * Source: java/lang/StringBuffer.main.lsl:449
     */
    public synchronized StringBuffer appendCodePoint(int codePoint) {
        StringBuffer result = null;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            final int cnt = this.count;
            final int len = this.value.length;
            if (Character.isBmpCodePoint(codePoint)) {
                if ((cnt + 1) <= len) {
                    value[cnt] = ((char) codePoint);
                    this.count = cnt + 1;
                }
            } else {
                if (Character.isValidCodePoint(codePoint)) {
                    if ((cnt + 2) <= len) {
                        value[cnt + 1] = Character.lowSurrogate(codePoint);
                        value[cnt] = Character.highSurrogate(codePoint);
                        this.count = cnt + 2;
                    }
                } else {
                    throw new IllegalArgumentException();
                }
            }
            result = this;
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::capacity(StringBuffer) -> int
     * Source: java/lang/StringBuffer.main.lsl:486
     */
    public synchronized int capacity() {
        int result = 0;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            result = this.value.length;
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::charAt(StringBuffer, int) -> char
     * Source: java/lang/StringBuffer.main.lsl:494
     */
    public synchronized char charAt(int index) {
        char result = '?';
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            if ((index < 0) || (index >= this.count)) {
                throw new StringIndexOutOfBoundsException();
            }
            result = value[index];
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::chars(StringBuffer) -> IntStream
     * Source: java/lang/StringBuffer.main.lsl:506
     */
    public IntStream chars() {
        IntStream result = null;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            final int len = this.count;
            final int[] intValues = new int[len];
            int i = 0;
            for (i = 0; i < len; i += 1) {
                intValues[i] = ((int) value[i]);
            }
            ;
            result = (IntStreamLSL) ((Object) new generated.java.util.stream.IntStreamLSL((Void) null, 
                /* state = */ generated.java.util.stream.IntStreamLSL.__$lsl_States.Initialized, 
                /* storage = */ intValues, 
                /* length = */ len, 
                /* closeHandlers = */ Engine.makeSymbolicList(), 
                /* isParallel = */ false, 
                /* linkedOrConsumed = */ false
            ));
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::codePointAt(StringBuffer, int) -> int
     * Source: java/lang/StringBuffer.main.lsl:532
     */
    public synchronized int codePointAt(int index) {
        int result = 0;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            if ((index < 0) || (index >= this.count)) {
                throw new StringIndexOutOfBoundsException(index);
            }
            result = Character.codePointAt(this.value, index, this.count);
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::codePointBefore(StringBuffer, int) -> int
     * Source: java/lang/StringBuffer.main.lsl:543
     */
    public synchronized int codePointBefore(int index) {
        int result = 0;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            final int i = index - 1;
            if ((i < 0) || (i >= this.count)) {
                throw new StringIndexOutOfBoundsException(index);
            }
            result = Character.codePointBefore(this.value, index, 0);
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::codePointCount(StringBuffer, int, int) -> int
     * Source: java/lang/StringBuffer.main.lsl:555
     */
    public synchronized int codePointCount(int beginIndex, int endIndex) {
        int result = 0;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            if ((beginIndex < 0) || (beginIndex > endIndex) || (endIndex > this.count)) {
                throw new IndexOutOfBoundsException();
            }
            result = Character.codePointCount(this.value, beginIndex, endIndex - beginIndex);
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::codePoints(StringBuffer) -> IntStream
     * Source: java/lang/StringBuffer.main.lsl:567
     */
    public IntStream codePoints() {
        IntStream result = null;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            final int len = this.count;
            final int[] intValues = new int[len];
            int i = 0;
            for (i = 0; i < len; i += 1) {
                intValues[i] = ((int) value[i]);
            }
            ;
            result = (IntStreamLSL) ((Object) new generated.java.util.stream.IntStreamLSL((Void) null, 
                /* state = */ generated.java.util.stream.IntStreamLSL.__$lsl_States.Initialized, 
                /* storage = */ intValues, 
                /* length = */ len, 
                /* closeHandlers = */ Engine.makeSymbolicList(), 
                /* isParallel = */ false, 
                /* linkedOrConsumed = */ false
            ));
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::compareTo(StringBuffer, StringBuffer) -> int
     * Source: java/lang/StringBuffer.main.lsl:588
     */
    public synchronized int compareTo(StringBuffer another) {
        int result = 0;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            if (another == this) {
                result = 0;
            } else {
                final String thisString = _asString();
                final String anotherString = ((StringBuffer) ((Object) another))._asString();
                result = thisString.compareTo(anotherString);
            }
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::delete(StringBuffer, int, int) -> StringBuffer
     * Source: java/lang/StringBuffer.main.lsl:606
     */
    public synchronized StringBuffer delete(int start, int end) {
        StringBuffer result = null;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            _deleteChars(start, end);
            result = this;
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::deleteCharAt(StringBuffer, int) -> StringBuffer
     * Source: java/lang/StringBuffer.main.lsl:616
     */
    public synchronized StringBuffer deleteCharAt(int index) {
        StringBuffer result = null;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            _deleteChars(index, index + 1);
            result = this;
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::ensureCapacity(StringBuffer, int) -> void
     * Source: java/lang/StringBuffer.main.lsl:626
     */
    public synchronized void ensureCapacity(int minimumCapacity) {
        /* body */ {
            Engine.assume(true);
        }
    }

    /**
     * [FUNCTION] StringBufferAutomaton::getChars(StringBuffer, int, int, array<char>, int) -> void
     * Source: java/lang/StringBuffer.main.lsl:633
     */
    public synchronized void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin) {
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            if ((srcBegin < 0) || (srcBegin > srcEnd) || (srcEnd > this.count)) {
                throw new StringIndexOutOfBoundsException();
            }
            final int len = srcEnd - srcBegin;
            if (dst == null) {
                throw new NullPointerException();
            }
            if ((dstBegin < 0) || ((dstBegin + len) > dst.length)) {
                throw new IndexOutOfBoundsException();
            }
            if (len > 0) {
                LibSLRuntime.ArrayActions.copy(this.value, srcBegin, dst, dstBegin, len);
            }
        }
    }

    /**
     * [FUNCTION] StringBufferAutomaton::getValue(StringBuffer) -> array<char>
     * Source: java/lang/StringBuffer.main.lsl:654
     */
    public char[] getValue() {
        char[] result = null;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            result = this.value;
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::indexOf(StringBuffer, String) -> int
     * Source: java/lang/StringBuffer.main.lsl:662
     */
    public int indexOf(String str) {
        int result = 0;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            result = _asString().indexOf(str, 0);
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::indexOf(StringBuffer, String, int) -> int
     * Source: java/lang/StringBuffer.main.lsl:671
     */
    public synchronized int indexOf(String str, int fromIndex) {
        int result = 0;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            result = _asString().indexOf(str, fromIndex);
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::insert(StringBuffer, int, CharSequence) -> StringBuffer
     * Source: java/lang/StringBuffer.main.lsl:680
     */
    public StringBuffer insert(int dstOffset, CharSequence s) {
        StringBuffer result = null;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            if (s == null) {
                _insertCharSequence(dstOffset, "null", 0, 4);
            } else {
                _insertCharSequence(dstOffset, s, 0, s.length());
            }
            result = this;
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::insert(StringBuffer, int, CharSequence, int, int) -> StringBuffer
     * Source: java/lang/StringBuffer.main.lsl:693
     */
    public synchronized StringBuffer insert(int dstOffset, CharSequence s, int start, int end) {
        StringBuffer result = null;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            if (s == null) {
                _insertCharSequence(dstOffset, "null", start, end);
            } else {
                _insertCharSequence(dstOffset, s, start, end);
            }
            result = this;
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::insert(StringBuffer, int, Object) -> StringBuffer
     * Source: java/lang/StringBuffer.main.lsl:706
     */
    public synchronized StringBuffer insert(int dstOffset, Object obj) {
        StringBuffer result = null;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            if (obj == null) {
                _insertCharSequence(dstOffset, "null", 0, 4);
            } else {
                final String s = LibSLRuntime.toString(obj);
                _insertCharSequence(dstOffset, s, 0, s.length());
            }
            result = this;
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::insert(StringBuffer, int, String) -> StringBuffer
     * Source: java/lang/StringBuffer.main.lsl:724
     */
    public synchronized StringBuffer insert(int dstOffset, String s) {
        StringBuffer result = null;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            if (s == null) {
                _insertCharSequence(dstOffset, "null", 0, 4);
            } else {
                _insertCharSequence(dstOffset, s, 0, s.length());
            }
            result = this;
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::insert(StringBuffer, int, boolean) -> StringBuffer
     * Source: java/lang/StringBuffer.main.lsl:737
     */
    public StringBuffer insert(int dstOffset, boolean x) {
        StringBuffer result = null;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            final String s = LibSLRuntime.toString(x);
            _insertCharSequence(dstOffset, s, 0, s.length());
            result = this;
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::insert(StringBuffer, int, char) -> StringBuffer
     * Source: java/lang/StringBuffer.main.lsl:748
     */
    public synchronized StringBuffer insert(int dstOffset, char x) {
        StringBuffer result = null;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            final String s = LibSLRuntime.toString(x);
            _insertCharSequence(dstOffset, s, 0, 1);
            result = this;
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::insert(StringBuffer, int, array<char>) -> StringBuffer
     * Source: java/lang/StringBuffer.main.lsl:759
     */
    public synchronized StringBuffer insert(int dstOffset, char[] x) {
        StringBuffer result = null;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            final String s = LibSLRuntime.toString(x);
            _insertCharSequence(dstOffset, s, 0, s.length());
            result = this;
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::insert(StringBuffer, int, array<char>, int, int) -> StringBuffer
     * Source: java/lang/StringBuffer.main.lsl:770
     */
    public synchronized StringBuffer insert(int index, char[] str, int offset, int len) {
        StringBuffer result = null;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            final char[] arr = new char[len];
            LibSLRuntime.ArrayActions.copy(str, offset, arr, 0, len);
            final String s = LibSLRuntime.toString(arr);
            _insertCharSequence(index, s, 0, len);
            result = this;
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::insert(StringBuffer, int, double) -> StringBuffer
     * Source: java/lang/StringBuffer.main.lsl:784
     */
    public StringBuffer insert(int dstOffset, double x) {
        StringBuffer result = null;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            final String s = LibSLRuntime.toString(x);
            _insertCharSequence(dstOffset, s, 0, s.length());
            result = this;
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::insert(StringBuffer, int, float) -> StringBuffer
     * Source: java/lang/StringBuffer.main.lsl:795
     */
    public StringBuffer insert(int dstOffset, float x) {
        StringBuffer result = null;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            final String s = LibSLRuntime.toString(x);
            _insertCharSequence(dstOffset, s, 0, s.length());
            result = this;
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::insert(StringBuffer, int, int) -> StringBuffer
     * Source: java/lang/StringBuffer.main.lsl:806
     */
    public StringBuffer insert(int dstOffset, int x) {
        StringBuffer result = null;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            final String s = LibSLRuntime.toString(x);
            _insertCharSequence(dstOffset, s, 0, s.length());
            result = this;
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::insert(StringBuffer, int, long) -> StringBuffer
     * Source: java/lang/StringBuffer.main.lsl:817
     */
    public StringBuffer insert(int dstOffset, long x) {
        StringBuffer result = null;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            final String s = LibSLRuntime.toString(x);
            _insertCharSequence(dstOffset, s, 0, s.length());
            result = this;
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::lastIndexOf(StringBuffer, String) -> int
     * Source: java/lang/StringBuffer.main.lsl:828
     */
    public int lastIndexOf(String str) {
        int result = 0;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            result = _asString().lastIndexOf(str, this.count);
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::lastIndexOf(StringBuffer, String, int) -> int
     * Source: java/lang/StringBuffer.main.lsl:837
     */
    public synchronized int lastIndexOf(String str, int fromIndex) {
        int result = 0;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            result = _asString().lastIndexOf(str, fromIndex);
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::length(StringBuffer) -> int
     * Source: java/lang/StringBuffer.main.lsl:846
     */
    public synchronized int length() {
        int result = 0;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            result = this.count;
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::offsetByCodePoints(StringBuffer, int, int) -> int
     * Source: java/lang/StringBuffer.main.lsl:854
     */
    public synchronized int offsetByCodePoints(int index, int codePointOffset) {
        int result = 0;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            if ((index < 0) || (index > this.count)) {
                throw new IndexOutOfBoundsException();
            }
            result = Character.offsetByCodePoints(this.value, 0, this.count, index, codePointOffset);
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::replace(StringBuffer, int, int, String) -> StringBuffer
     * Source: java/lang/StringBuffer.main.lsl:865
     */
    public synchronized StringBuffer replace(int start, int end, String s) {
        StringBuffer result = null;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            _deleteChars(start, end);
            if (s == null) {
                _insertCharSequence(start, "null", 0, 4);
            } else {
                _insertCharSequence(start, s, 0, s.length());
            }
            result = this;
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::reverse(StringBuffer) -> StringBuffer
     * Source: java/lang/StringBuffer.main.lsl:880
     */
    public synchronized StringBuffer reverse() {
        StringBuffer result = null;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            if (this.count != 0) {
                boolean hasSurrogates = false;
                final int n = this.count - 1;
                int j = 0;
                for (j = (n - 1) >> 1; j > -1; j += -1) {
                    int k = n - j;
                    char cj = value[j];
                    char ck = value[k];
                    value[j] = ck;
                    value[k] = cj;
                    if (Character.isSurrogate(cj) || Character.isSurrogate(ck)) {
                        hasSurrogates = true;
                    }
                }
                ;
                if (hasSurrogates) {
                    int i = 0;
                    for (i = 0; i < n; i += 1) {
                        char c2 = value[i];
                        if (Character.isLowSurrogate(c2)) {
                            char c1 = value[i + 1];
                            if (Character.isHighSurrogate(c1)) {
                                value[i] = c1;
                                i += 1;
                                value[i] = c2;
                            }
                        }
                    }
                    ;
                }
            }
            result = this;
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::setCharAt(StringBuffer, int, char) -> void
     * Source: java/lang/StringBuffer.main.lsl:942
     */
    public synchronized void setCharAt(int index, char x) {
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            if ((index < 0) || (index >= this.count)) {
                throw new StringIndexOutOfBoundsException();
            }
            value[index] = x;
        }
    }

    /**
     * [FUNCTION] StringBufferAutomaton::setLength(StringBuffer, int) -> void
     * Source: java/lang/StringBuffer.main.lsl:953
     */
    public synchronized void setLength(int newLength) {
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            final int maxLength = this.value.length;
            if (newLength > maxLength) {
                newLength = maxLength;
            }
            if (newLength < 0) {
                throw new StringIndexOutOfBoundsException();
            } else {
                if (newLength < this.count) {
                    this.count = newLength;
                } else {
                    if (newLength > this.count) {
                        LibSLRuntime.ArrayActions.fillRange(this.value, this.count, newLength, ((char) 0));
                        this.count = newLength;
                    }
                }
            }
        }
    }

    /**
     * [FUNCTION] StringBufferAutomaton::subSequence(StringBuffer, int, int) -> CharSequence
     * Source: java/lang/StringBuffer.main.lsl:978
     */
    public synchronized CharSequence subSequence(int start, int end) {
        CharSequence result = null;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            if ((start < 0) || (start > end) || (end > this.count)) {
                throw new StringIndexOutOfBoundsException();
            }
            result = _asString(start, end);
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::substring(StringBuffer, int) -> String
     * Source: java/lang/StringBuffer.main.lsl:989
     */
    public synchronized String substring(int start) {
        String result = null;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            if ((start < 0) || (start > this.count)) {
                throw new StringIndexOutOfBoundsException();
            }
            result = _asString(start, this.count);
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::substring(StringBuffer, int, int) -> String
     * Source: java/lang/StringBuffer.main.lsl:1000
     */
    public synchronized String substring(int start, int end) {
        String result = null;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            if ((start < 0) || (start > end) || (end > this.count)) {
                throw new StringIndexOutOfBoundsException();
            }
            result = _asString(start, end);
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::toString(StringBuffer) -> String
     * Source: java/lang/StringBuffer.main.lsl:1011
     */
    public synchronized String toString() {
        String result = null;
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
            result = _asString();
        }
        return result;
    }

    /**
     * [FUNCTION] StringBufferAutomaton::trimToSize(StringBuffer) -> void
     * Source: java/lang/StringBuffer.main.lsl:1019
     */
    public synchronized void trimToSize() {
        /* body */ {
            Engine.assume(this.value != null);
            Engine.assume(this.value.length <= STRINGBUFFER_LENGTH_MAX);
            Engine.assume(this.count <= this.value.length);
            Engine.assume(this.count >= 0);
        }
    }

    public static final class __$lsl_States {
        public static final byte Initialized = (byte) 0;
    }

    @Approximate(StringBuffer.class)
    public static final class __hook {
        private __hook(Void o1, Void o2) {
            Engine.assume(false);
        }
    }
}
