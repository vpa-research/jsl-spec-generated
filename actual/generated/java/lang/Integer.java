// Generated by the LibSL translator.  DO NOT EDIT!
// source: ?
//
package generated.java.lang;

import java.lang.Comparable;
import java.lang.Number;
import java.lang.Void;
import org.jacodb.approximation.annotation.Approximate;
import org.usvm.api.Engine;
import runtime.LibSLRuntime;

/**
 * IntegerAutomaton for LSLInteger ~> java.lang.Integer
 */
@Approximate(java.lang.Integer.class)
public final class Integer extends Number implements LibSLRuntime.Automaton, Comparable<Integer> {
    private final int value;

    @LibSLRuntime.AutomatonConstructor
    public Integer(Void __$lsl_token, final byte p0, final int p1) {
        this.value = p1;
    }

    @LibSLRuntime.AutomatonConstructor
    public Integer(final Void __$lsl_token) {
        this(__$lsl_token, __$lsl_States.Initialized, 0);
    }

    /**
     * [FUNCTION] IntegerAutomaton::valueOf(int) -> LSLInteger
     */
    public static Integer valueOf(int i) {
        Integer result = null;
        /* body */ {
            result = new Integer((Void) null, 
            /* state = */ Integer.__$lsl_States.Initialized, 
            /* value = */ i);
        }
        return result;
    }

    public static final class __$lsl_States {
        public static final byte Initialized = (byte) 0;
    }

    @Approximate(Integer.class)
    public static final class __hook {
        private __hook(Void o1, Void o2) {
            Engine.assume(false);
        }
    }
}
