// Generated by the LibSL translator.  DO NOT EDIT!
// source: java\util\OptionalDouble.lsl
//
package actual.java.util;

import java.util.function.DoubleConsumer;
import java.util.function.DoubleSupplier;
import java.util.function.Supplier;
import java.util.stream.DoubleStream;
import ru.spbpu.usvm.api.LibSLRuntime;

@LibSLRuntime.InsteadOf("java.util.OptionalDouble")
public class OptionalDouble implements LibSLRuntime.HasAutomaton {
    private OptionalDouble() {
        // TODO: method body
    }

    private OptionalDouble(double x) {
        // TODO: method body
    }

    public static java.util.OptionalDouble empty() {
        // TODO: method body
    }

    public static java.util.OptionalDouble of(double x) {
        // TODO: method body
    }

    public boolean equals(Object other) {
        // TODO: method body
    }

    public double getAsDouble() {
        // TODO: method body
    }

    public int hashCode() {
        // TODO: method body
    }

    public void ifPresent(DoubleConsumer consumer) {
        // TODO: method body
    }

    public void ifPresentOrElse(DoubleConsumer consumer, Runnable emptyAction) {
        // TODO: method body
    }

    public boolean isEmpty() {
        // TODO: method body
    }

    public boolean isPresent() {
        // TODO: method body
    }

    public double orElse(double other) {
        // TODO: method body
    }

    public double orElseGet(DoubleSupplier supplier) {
        // TODO: method body
    }

    public double orElseThrow() {
        // TODO: method body
    }

    public double orElseThrow(Supplier<? extends X> exceptionSupplier) throws X {
        // TODO: method body
    }

    public DoubleStream stream() {
        // TODO: method body
    }

    public String toString() {
        // TODO: method body
    }
}
