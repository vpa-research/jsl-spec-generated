// Generated by the LibSL translator.  DO NOT EDIT!
// source: ?
//
package java.util;

import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import org.usvm.api.Engine;
import runtime.LibSLRuntime;

public final class RandomAutomaton implements LibSLRuntime.Automaton {
    public byte __$lsl_state = __$lsl_States.Allocated;

    @LibSLRuntime.AutomatonConstructor
    public RandomAutomaton(final byte __$lsl_state) {
        this.__$lsl_state = __$lsl_state;
    }

    @LibSLRuntime.AutomatonConstructor
    public RandomAutomaton() {
        this(__$lsl_States.Allocated);
    }

    public void Random(Random self) {
        Engine.assume(this.__$lsl_state == __$lsl_States.Allocated);
        /* body */ {
            LibSLRuntime.todo();
        }
        this.__$lsl_state = __$lsl_States.Initialized;
    }

    public void Random(Random self, long arg0) {
        Engine.assume(this.__$lsl_state == __$lsl_States.Allocated);
        /* body */ {
            LibSLRuntime.todo();
        }
        this.__$lsl_state = __$lsl_States.Initialized;
    }

    public DoubleStream doubles(Random self) {
        DoubleStream result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    public DoubleStream doubles(Random self, double arg0, double arg1) {
        DoubleStream result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    public DoubleStream doubles(Random self, long arg0) {
        DoubleStream result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    public DoubleStream doubles(Random self, long arg0, double arg1, double arg2) {
        DoubleStream result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    public IntStream ints(Random self) {
        IntStream result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    public IntStream ints(Random self, int arg0, int arg1) {
        IntStream result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    public IntStream ints(Random self, long arg0) {
        IntStream result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    public IntStream ints(Random self, long arg0, int arg1, int arg2) {
        IntStream result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    public LongStream longs(Random self) {
        LongStream result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    public LongStream longs(Random self, long arg0) {
        LongStream result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    public LongStream longs(Random self, long arg0, long arg1) {
        LongStream result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    public LongStream longs(Random self, long arg0, long arg1, long arg2) {
        LongStream result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    public boolean nextBoolean(Random self) {
        boolean result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    public void nextBytes(Random self, byte[] arg0) {
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
    }

    public double nextDouble(Random self) {
        double result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    public float nextFloat(Random self) {
        float result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    public synchronized double nextGaussian(Random self) {
        double result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    public int nextInt(Random self) {
        int result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    public int nextInt(Random self, int arg0) {
        int result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    public long nextLong(Random self) {
        long result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
        return result;
    }

    public synchronized void setSeed(Random self, long arg0) {
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.todo();
        }
    }

    public static final class __$lsl_States {
        public static final byte Allocated = (byte) 0;

        public static final byte Initialized = (byte) 1;
    }
}
