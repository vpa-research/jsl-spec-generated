// Generated by the LibSL translator.  DO NOT EDIT!
// source: java/util/Optional.lsl
//
package actual.java.util;

import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.stream.Stream;
import org.usvm.api.Engine;
import runtime.LibSLGlobals;
import runtime.LibSLRuntime;

public final class OptionalAutomaton<T> implements LibSLRuntime.Automaton {
    public __$lsl_States __$lsl_state = __$lsl_States.Allocated;

    private Object value = null;

    @LibSLRuntime.AutomatonConstructor
    public OptionalAutomaton(__$lsl_States __$lsl_state, Object value) {
        this.__$lsl_state = __$lsl_state;
        this.value = value;
    }

    @LibSLRuntime.AutomatonConstructor
    public OptionalAutomaton() {
        this(__$lsl_States.Allocated, null);
    }

    public void Optional(Optional self) {
        Engine.assume(this.__$lsl_state == __$lsl_States.Allocated);
        /* body */ {
            LibSLRuntime.error("Private constructor call");
        }
        this.__$lsl_state = __$lsl_States.Initialized;
    }

    public void Optional(Optional self, Object obj) {
        Engine.assume(this.__$lsl_state == __$lsl_States.Allocated);
        /* body */ {
            LibSLRuntime.error("Private constructor call");
        }
        this.__$lsl_state = __$lsl_States.Initialized;
    }

    public static Optional _makeEmpty() {
        Optional result;
        /* body */ {
            result = LibSLGlobals.EMPTY_OPTIONAL;
        }
        return result;
    }

    public static void _throwNPE() {
        /* body */ {
            throw new java.lang.NullPointerException();
        }
    }

    public static <T> Optional empty() {
        Optional result;
        // WARNING: no state checks in static context
        /* body */ {
            result = _makeEmpty();
        }
        // WARNING: no state transitions in static context
        return result;
    }

    public static <T> Optional of(Object obj) {
        Optional result;
        // WARNING: no state checks in static context
        /* body */ {
            if (obj == null) {
                throw new java.lang.NullPointerException();
            }
            result = new Optional(new OptionalAutomaton(OptionalAutomaton.__$lsl_States.Initialized, obj));
        }
        // WARNING: no state transitions in static context
        return result;
    }

    public static <T> Optional ofNullable(Object obj) {
        Optional result;
        // WARNING: no state checks in static context
        /* body */ {
            if (obj == null) {
                result = _makeEmpty();
            } else {
                result = new Optional(new OptionalAutomaton(OptionalAutomaton.__$lsl_States.Initialized, obj));
            }
        }
        // WARNING: no state transitions in static context
        return result;
    }

    public boolean equals(Optional self, Object other) {
        boolean result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            if (other == self) {
                result = true;
            } else {
                final boolean isSameType = Engine.isSameType(self, other);
                if (isSameType) {
                    final Object otherValue = LibSLRuntime.getAutomatonFrom(other, OptionalAutomaton.class).value;
                    result = Engine.equals(this.value, otherValue);
                } else {
                    result = false;
                }
            }
        }
        return result;
    }

    public Optional filter(Optional self, Predicate<? super T> predicate) {
        Optional result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            if (predicate == null) {
                throw new java.lang.NullPointerException();
            }
            if (this.value == null) {
                result = self;
            } else {
                final boolean sat = predicate.test(this.value);
                if (sat) {
                    result = self;
                } else {
                    result = _makeEmpty();
                }
            }
        }
        return result;
    }

    public <U> Optional flatMap(Optional self,
            Function<? super T, ? extends Optional<? extends U>> mapper) {
        Optional result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            if (mapper == null) {
                throw new java.lang.NullPointerException();
            }
            if (this.value == null) {
                result = _makeEmpty();
            } else {
                result = mapper.apply(this.value);
                if (result == null) {
                    throw new java.lang.NullPointerException();
                }
            }
        }
        return result;
    }

    public Object get(Optional self) {
        Object result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            if (this.value == null) {
                throw new java.util.NoSuchElementException("No value present");
            }
            result = this.value;
        }
        return result;
    }

    public int hashCode(Optional self) {
        int result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            result = Engine.hashCode(this.value);
        }
        return result;
    }

    public void ifPresent(Optional self, Consumer<? super T> consumer) {
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            if (this.value != null) {
                if (consumer == null) {
                    throw new java.lang.NullPointerException();
                }
                consumer.accept(this.value);
            }
        }
    }

    public void ifPresentOrElse(Optional self, Consumer<? super T> consumer, Runnable emptyAction) {
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            if (this.value != null) {
                if (consumer == null) {
                    throw new java.lang.NullPointerException();
                }
                consumer.accept(this.value);
            } else {
                if (emptyAction == null) {
                    throw new java.lang.NullPointerException();
                }
                emptyAction.run();
            }
        }
    }

    public boolean isEmpty(Optional self) {
        boolean result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            result = this.value == null;
        }
        return result;
    }

    public boolean isPresent(Optional self) {
        boolean result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            result = this.value != null;
        }
        return result;
    }

    public <U> Optional map(Optional self,
            Function<? super T, ? extends Optional<? extends U>> mapper) {
        Optional result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            if (mapper == null) {
                throw new java.lang.NullPointerException();
            }
            if (this.value == null) {
                result = _makeEmpty();
            } else {
                final Object mappedValue = mapper.apply(this.value);
                if (mappedValue == null) {
                    result = _makeEmpty();
                } else {
                    result = new Optional(new OptionalAutomaton(OptionalAutomaton.__$lsl_States.Initialized, mappedValue));
                }
            }
        }
        return result;
    }

    public Optional or(Optional self, Supplier<? extends Optional<? extends T>> supplier) {
        Optional result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            if (supplier == null) {
                throw new java.lang.NullPointerException();
            }
            if (this.value == null) {
                result = supplier.get();
                if (result == null) {
                    throw new java.lang.NullPointerException();
                }
            } else {
                result = self;
            }
        }
        return result;
    }

    public Object orElse(Optional self, Object other) {
        Object result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            if (this.value == null) {
                result = other;
            } else {
                result = this.value;
            }
        }
        return result;
    }

    public Object orElseGet(Optional self, Supplier<? extends Optional<? extends T>> supplier) {
        Object result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            if (supplier == null) {
                throw new java.lang.NullPointerException();
            }
            if (this.value == null) {
                result = supplier.get();
            } else {
                result = this.value;
            }
        }
        return result;
    }

    public Object orElseThrow(Optional self) {
        Object result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            if (this.value == null) {
                throw new java.util.NoSuchElementException("No value present");
            }
            result = this.value;
        }
        return result;
    }

    public <X extends java.lang.Throwable> Object orElseThrow(Optional self,
            Supplier<? extends Optional<? extends T>> exceptionSupplier) throws X {
        Object result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            if (exceptionSupplier == null) {
                throw new java.lang.NullPointerException();
            }
            if (this.value == null) {
                final Object exception = exceptionSupplier.get();
                throw ((Throwable) exception);
            } else {
                result = this.value;
            }
        }
        return result;
    }

    public Stream<T> stream(Optional self) {
        Stream<T> result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            LibSLRuntime.not_implemented();
        }
        return result;
    }

    public String toString(Optional self) {
        String result;
        Engine.assume(this.__$lsl_state == __$lsl_States.Initialized);
        /* body */ {
            if (this.value == null) {
                result = "Optional.empty";
            } else {
                final String valueStr = Engine.toString(this.value);
                result = "Optional[" + valueStr + "]";
            }
        }
        return result;
    }

    public enum __$lsl_States {
        Allocated,

        Initialized
    }
}
