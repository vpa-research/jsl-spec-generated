// Generated by the LibSL translator.  DO NOT EDIT!
// source: ?
//
package stub.runtime.utils;

import java.io.InputStream;
import java.io.OutputStream;
import java.lang.InternalError;
import runtime.LibSLRuntime;

public final class SymbolicInputStream extends InputStream implements LibSLRuntime.HasAutomaton {
    public int available() throws java.io.IOException {
        throw new InternalError();
    }

    public void close() throws java.io.IOException {
        throw new InternalError();
    }

    public void mark(int readlimit) {
        throw new InternalError();
    }

    public boolean markSupported() {
        throw new InternalError();
    }

    public int read() throws java.io.IOException {
        throw new InternalError();
    }

    public int read(byte[] b) throws java.io.IOException {
        throw new InternalError();
    }

    public int read(byte[] b, int off, int len) throws java.io.IOException {
        throw new InternalError();
    }

    public byte[] readAllBytes() throws java.io.IOException {
        throw new InternalError();
    }

    public int readNBytes(byte[] b, int off, int len) throws java.io.IOException {
        throw new InternalError();
    }

    public byte[] readNBytes(int len) throws java.io.IOException {
        throw new InternalError();
    }

    public void reset() throws java.io.IOException {
        throw new InternalError();
    }

    public long skip(long n) throws java.io.IOException {
        throw new InternalError();
    }

    public long transferTo(OutputStream out) throws java.io.IOException {
        throw new InternalError();
    }
}
