// Generated by the LibSL translator.  DO NOT EDIT!
// sources:
//  - libsl/utils/VoidInputStream.lsl:16
//
package stub.libsl.utils;

import java.io.InputStream;
import java.io.OutputStream;
import java.lang.LinkageError;
import java.lang.SuppressWarnings;
import java.lang.Void;
import runtime.LibSLRuntime;

@SuppressWarnings({"all", "unchecked"})
public final class VoidInputStream extends InputStream implements LibSLRuntime.HasAutomaton {
    private VoidInputStream(Void a, Void b) {
        super();
    }

    public int available() throws java.io.IOException {
        throw new LinkageError();
    }

    public void close() throws java.io.IOException {
        throw new LinkageError();
    }

    public synchronized void mark(int readlimit) {
        throw new LinkageError();
    }

    public boolean markSupported() {
        throw new LinkageError();
    }

    public int read() throws java.io.IOException {
        throw new LinkageError();
    }

    public int read(byte[] b) throws java.io.IOException {
        throw new LinkageError();
    }

    public int read(byte[] b, int off, int len) throws java.io.IOException {
        throw new LinkageError();
    }

    public byte[] readAllBytes() throws java.io.IOException {
        throw new LinkageError();
    }

    public int readNBytes(byte[] b, int off, int len) throws java.io.IOException {
        throw new LinkageError();
    }

    public byte[] readNBytes(int len) throws java.io.IOException {
        throw new LinkageError();
    }

    public synchronized void reset() throws java.io.IOException {
        throw new LinkageError();
    }

    public long skip(long n) throws java.io.IOException {
        throw new LinkageError();
    }

    public long transferTo(OutputStream out) throws java.io.IOException {
        throw new LinkageError();
    }
}
