// Generated by the LibSL translator.  DO NOT EDIT!
// sources:
//  - java/util/LinkedList.lsl:61
//
package stub.java.util;

import java.lang.LinkageError;
import java.lang.Object;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.lang.Void;
import java.util.AbstractList;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.RandomAccess;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.function.IntFunction;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import runtime.LibSLRuntime;

@SuppressWarnings({"all", "unchecked"})
public final class LinkedList_SubList extends AbstractList implements LibSLRuntime.HasAutomaton, List, RandomAccess {
    private LinkedList_SubList(Void a, Void b) {
        super();
    }

    public LinkedList_SubList(LinkedList root, int fromIndex, int toIndex) {
        throw new LinkageError();
    }

    private LinkedList_SubList(LinkedList_SubList parent, int fromIndex, int toIndex) {
        throw new LinkageError();
    }

    public boolean add(Object e) {
        throw new LinkageError();
    }

    public void add(int index, Object element) {
        throw new LinkageError();
    }

    public boolean addAll(Collection c) {
        throw new LinkageError();
    }

    public boolean addAll(int index, Collection c) {
        throw new LinkageError();
    }

    public void clear() {
        throw new LinkageError();
    }

    public boolean contains(Object o) {
        throw new LinkageError();
    }

    public boolean containsAll(Collection c) {
        throw new LinkageError();
    }

    public boolean equals(Object o) {
        throw new LinkageError();
    }

    public void forEach(Consumer _action) {
        throw new LinkageError();
    }

    public Object get(int index) {
        throw new LinkageError();
    }

    public int hashCode() {
        throw new LinkageError();
    }

    public int indexOf(Object o) {
        throw new LinkageError();
    }

    public boolean isEmpty() {
        throw new LinkageError();
    }

    public Iterator iterator() {
        throw new LinkageError();
    }

    public int lastIndexOf(Object o) {
        throw new LinkageError();
    }

    public ListIterator listIterator() {
        throw new LinkageError();
    }

    public ListIterator listIterator(int index) {
        throw new LinkageError();
    }

    public Stream parallelStream() {
        throw new LinkageError();
    }

    public boolean remove(Object o) {
        throw new LinkageError();
    }

    public Object remove(int index) {
        throw new LinkageError();
    }

    public boolean removeAll(Collection c) {
        throw new LinkageError();
    }

    public boolean removeIf(Predicate filter) {
        throw new LinkageError();
    }

    public void replaceAll(UnaryOperator operator) {
        throw new LinkageError();
    }

    public boolean retainAll(Collection c) {
        throw new LinkageError();
    }

    public Object set(int index, Object element) {
        throw new LinkageError();
    }

    public int size() {
        throw new LinkageError();
    }

    public void sort(Comparator c) {
        throw new LinkageError();
    }

    public Spliterator spliterator() {
        throw new LinkageError();
    }

    public Stream stream() {
        throw new LinkageError();
    }

    public List subList(int fromIndex, int toIndex) {
        throw new LinkageError();
    }

    public Object[] toArray() {
        throw new LinkageError();
    }

    public Object[] toArray(IntFunction generator) {
        throw new LinkageError();
    }

    public Object[] toArray(Object[] a) {
        throw new LinkageError();
    }

    public String toString() {
        throw new LinkageError();
    }
}
