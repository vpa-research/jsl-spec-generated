// Generated by the LibSL translator.  DO NOT EDIT!
// sources:
//  - java/util/HashMap.lsl:37
//
package stub.java.util;

import java.lang.LinkageError;
import java.lang.Object;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.lang.Void;
import java.util.AbstractCollection;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.function.IntFunction;
import java.util.function.Predicate;
import java.util.stream.Stream;
import runtime.LibSLRuntime;

@SuppressWarnings({"all", "unchecked"})
public class HashMap_Values extends AbstractCollection implements LibSLRuntime.HasAutomaton {
    private HashMap_Values(Void a, Void b) {
        super();
    }

    private HashMap_Values(HashMap _this) {
        throw new LinkageError();
    }

    public boolean add(Object e) {
        throw new LinkageError();
    }

    public boolean addAll(Collection c) {
        throw new LinkageError();
    }

    public final void clear() {
        throw new LinkageError();
    }

    public final boolean contains(Object value) {
        throw new LinkageError();
    }

    public boolean containsAll(Collection c) {
        throw new LinkageError();
    }

    public final void forEach(Consumer userAction) {
        throw new LinkageError();
    }

    public boolean isEmpty() {
        throw new LinkageError();
    }

    public final Iterator iterator() {
        throw new LinkageError();
    }

    public Stream parallelStream() {
        throw new LinkageError();
    }

    public boolean remove(Object value) {
        throw new LinkageError();
    }

    public boolean removeAll(Collection c) {
        throw new LinkageError();
    }

    public boolean removeIf(Predicate filter) {
        throw new LinkageError();
    }

    public boolean retainAll(Collection c) {
        throw new LinkageError();
    }

    public final int size() {
        throw new LinkageError();
    }

    public final Spliterator spliterator() {
        throw new LinkageError();
    }

    public Stream stream() {
        throw new LinkageError();
    }

    public Object[] toArray() {
        throw new LinkageError();
    }

    public Object[] toArray(IntFunction generator) {
        throw new LinkageError();
    }

    public Object[] toArray(Object[] a) {
        throw new LinkageError();
    }

    public String toString() {
        throw new LinkageError();
    }
}
