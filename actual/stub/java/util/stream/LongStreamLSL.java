// Generated by the LibSL translator.  DO NOT EDIT!
// sources:
//  - java/util/stream/LongStream.lsl:27
//
package stub.java.util.stream;

import java.lang.LinkageError;
import java.lang.Object;
import java.lang.Runnable;
import java.lang.SuppressWarnings;
import java.lang.Void;
import java.util.LongSummaryStatistics;
import java.util.OptionalDouble;
import java.util.OptionalLong;
import java.util.PrimitiveIterator;
import java.util.Spliterator;
import java.util.function.BiConsumer;
import java.util.function.LongBinaryOperator;
import java.util.function.LongConsumer;
import java.util.function.LongFunction;
import java.util.function.LongPredicate;
import java.util.function.LongToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongUnaryOperator;
import java.util.function.ObjLongConsumer;
import java.util.function.Supplier;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import java.util.stream.Stream;
import runtime.LibSLRuntime;

@SuppressWarnings({"all", "unchecked"})
public class LongStreamLSL implements LibSLRuntime.HasAutomaton, LongStream {
    private LongStreamLSL(Void a, Void b) {
        super();
    }

    public LongStream filter(LongPredicate predicate) {
        throw new LinkageError();
    }

    public LongStream map(LongUnaryOperator mapper) {
        throw new LinkageError();
    }

    public Stream mapToObj(LongFunction mapper) {
        throw new LinkageError();
    }

    public IntStream mapToInt(LongToIntFunction mapper) {
        throw new LinkageError();
    }

    public DoubleStream mapToDouble(LongToDoubleFunction mapper) {
        throw new LinkageError();
    }

    public LongStream flatMap(LongFunction mapper) {
        throw new LinkageError();
    }

    public LongStream sorted() {
        throw new LinkageError();
    }

    public LongStream distinct() {
        throw new LinkageError();
    }

    public LongStream peek(LongConsumer _action) {
        throw new LinkageError();
    }

    public LongStream limit(long maxSize) {
        throw new LinkageError();
    }

    public LongStream skip(long n) {
        throw new LinkageError();
    }

    public void forEach(LongConsumer _action) {
        throw new LinkageError();
    }

    public void forEachOrdered(LongConsumer _action) {
        throw new LinkageError();
    }

    public long[] toArray() {
        throw new LinkageError();
    }

    public long reduce(long identity, LongBinaryOperator accumulator) {
        throw new LinkageError();
    }

    public OptionalLong reduce(LongBinaryOperator accumulator) {
        throw new LinkageError();
    }

    public Object collect(Supplier supplier, ObjLongConsumer accumulator, BiConsumer combiner) {
        throw new LinkageError();
    }

    public OptionalLong min() {
        throw new LinkageError();
    }

    public OptionalLong max() {
        throw new LinkageError();
    }

    public long count() {
        throw new LinkageError();
    }

    public boolean anyMatch(LongPredicate predicate) {
        throw new LinkageError();
    }

    public boolean allMatch(LongPredicate predicate) {
        throw new LinkageError();
    }

    public boolean noneMatch(LongPredicate predicate) {
        throw new LinkageError();
    }

    public OptionalLong findFirst() {
        throw new LinkageError();
    }

    public OptionalLong findAny() {
        throw new LinkageError();
    }

    public PrimitiveIterator.OfLong iterator() {
        throw new LinkageError();
    }

    public Spliterator.OfLong spliterator() {
        throw new LinkageError();
    }

    public boolean isParallel() {
        throw new LinkageError();
    }

    public LongStream sequential() {
        throw new LinkageError();
    }

    public LongStream parallel() {
        throw new LinkageError();
    }

    public LongStream unordered() {
        throw new LinkageError();
    }

    public LongStream onClose(Runnable closeHandler) {
        throw new LinkageError();
    }

    public void close() {
        throw new LinkageError();
    }

    public LongStream dropWhile(LongPredicate predicate) {
        throw new LinkageError();
    }

    public LongStream takeWhile(LongPredicate predicate) {
        throw new LinkageError();
    }

    public DoubleStream asDoubleStream() {
        throw new LinkageError();
    }

    public long sum() {
        throw new LinkageError();
    }

    public OptionalDouble average() {
        throw new LinkageError();
    }

    public LongSummaryStatistics summaryStatistics() {
        throw new LinkageError();
    }

    public Stream boxed() {
        throw new LinkageError();
    }
}
