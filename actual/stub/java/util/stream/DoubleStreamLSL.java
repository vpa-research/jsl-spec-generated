// Generated by the LibSL translator.  DO NOT EDIT!
// sources:
//  - java/util/stream/DoubleStream.lsl:27
//
package stub.java.util.stream;

import java.lang.InternalError;
import java.lang.Object;
import java.lang.Runnable;
import java.lang.SuppressWarnings;
import java.lang.Void;
import java.util.DoubleSummaryStatistics;
import java.util.OptionalDouble;
import java.util.PrimitiveIterator;
import java.util.Spliterator;
import java.util.function.BiConsumer;
import java.util.function.DoubleBinaryOperator;
import java.util.function.DoubleConsumer;
import java.util.function.DoubleFunction;
import java.util.function.DoublePredicate;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.DoubleUnaryOperator;
import java.util.function.ObjDoubleConsumer;
import java.util.function.Supplier;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import java.util.stream.Stream;
import runtime.LibSLRuntime;

@SuppressWarnings({"all", "unchecked"})
public class DoubleStreamLSL implements LibSLRuntime.HasAutomaton, DoubleStream {
    private DoubleStreamLSL(Void a, Void b) {
        super();
    }

    public DoubleStream filter(DoublePredicate predicate) {
        throw new InternalError();
    }

    public DoubleStream map(DoubleUnaryOperator mapper) {
        throw new InternalError();
    }

    public Stream mapToObj(DoubleFunction mapper) {
        throw new InternalError();
    }

    public LongStream mapToLong(DoubleToLongFunction mapper) {
        throw new InternalError();
    }

    public IntStream mapToInt(DoubleToIntFunction mapper) {
        throw new InternalError();
    }

    public DoubleStream flatMap(DoubleFunction mapper) {
        throw new InternalError();
    }

    public DoubleStream sorted() {
        throw new InternalError();
    }

    public DoubleStream distinct() {
        throw new InternalError();
    }

    public DoubleStream peek(DoubleConsumer _action) {
        throw new InternalError();
    }

    public DoubleStream limit(long maxSize) {
        throw new InternalError();
    }

    public DoubleStream skip(long n) {
        throw new InternalError();
    }

    public void forEach(DoubleConsumer _action) {
        throw new InternalError();
    }

    public void forEachOrdered(DoubleConsumer _action) {
        throw new InternalError();
    }

    public double[] toArray() {
        throw new InternalError();
    }

    public double reduce(double identity, DoubleBinaryOperator accumulator) {
        throw new InternalError();
    }

    public OptionalDouble reduce(DoubleBinaryOperator accumulator) {
        throw new InternalError();
    }

    public Object collect(Supplier supplier, ObjDoubleConsumer accumulator, BiConsumer combiner) {
        throw new InternalError();
    }

    public OptionalDouble min() {
        throw new InternalError();
    }

    public OptionalDouble max() {
        throw new InternalError();
    }

    public long count() {
        throw new InternalError();
    }

    public boolean anyMatch(DoublePredicate predicate) {
        throw new InternalError();
    }

    public boolean allMatch(DoublePredicate predicate) {
        throw new InternalError();
    }

    public boolean noneMatch(DoublePredicate predicate) {
        throw new InternalError();
    }

    public OptionalDouble findFirst() {
        throw new InternalError();
    }

    public OptionalDouble findAny() {
        throw new InternalError();
    }

    public PrimitiveIterator.OfDouble iterator() {
        throw new InternalError();
    }

    public Spliterator.OfDouble spliterator() {
        throw new InternalError();
    }

    public boolean isParallel() {
        throw new InternalError();
    }

    public DoubleStream sequential() {
        throw new InternalError();
    }

    public DoubleStream parallel() {
        throw new InternalError();
    }

    public DoubleStream unordered() {
        throw new InternalError();
    }

    public DoubleStream onClose(Runnable closeHandler) {
        throw new InternalError();
    }

    public void close() {
        throw new InternalError();
    }

    public DoubleStream dropWhile(DoublePredicate predicate) {
        throw new InternalError();
    }

    public DoubleStream takeWhile(DoublePredicate predicate) {
        throw new InternalError();
    }

    public double sum() {
        throw new InternalError();
    }

    public OptionalDouble average() {
        throw new InternalError();
    }

    public DoubleSummaryStatistics summaryStatistics() {
        throw new InternalError();
    }

    public Stream boxed() {
        throw new InternalError();
    }
}
