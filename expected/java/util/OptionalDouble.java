// Generated by the LibSL translator.  DO NOT EDIT!
// source: java/util/OptionalDouble.lsl
//
package com.example.helloworld;

import java.util.function.DoubleConsumer;
import java.util.function.DoubleSupplier;
import java.util.function.Supplier;
import java.util.stream.DoubleStream;
import ru.spbpu.usvm.api.LibSLRuntime;

public final class OptionalDouble implements LibSLRuntime.HasAutomaton {
    public OptionalDoubleAutomaton __$a = null;

    public OptionalDouble(final OptionalDoubleAutomaton a) {
        this.__$a = a;
    }

    @Override
    public LibSLRuntime.Automaton __$getAutomaton() {
        return this.__$a;
    }

    private OptionalDouble() {
        // #problem: automatic automaton binding within public constructors?

        __$a.OptionalDouble(this); // #problem: instantiation using Reflection causes NullPointerException
    }

    private OptionalDouble(double x) {
        __$a.OptionalDouble(this, x);
    }

    public static OptionalDouble empty() {
        return OptionalDoubleAutomaton.empty();
    }

    public static OptionalDouble of(double x) {
        return OptionalDoubleAutomaton.of(x);
    }

    @Override
    public boolean equals(Object other) {
        return __$a.equals(this, other);
    }

    public double getAsDouble() {
        return __$a.getAsDouble(this);
    }

    @Override
    public int hashCode() {
        return __$a.hashCode(this);
    }

    public void ifPresent(DoubleConsumer consumer) {
        __$a.ifPresent(this, consumer);
    }

    public void ifPresentOrElse(DoubleConsumer consumer, Runnable emptyAction) {
        __$a.ifPresentOrElse(this, consumer, emptyAction);
    }

    public boolean isEmpty() {
        return __$a.isEmpty(this);
    }

    public boolean isPresent() {
        return __$a.isPresent(this);
    }

    public double orElse(double other) {
        return __$a.orElse(this, other);
    }

    public double orElseGet(DoubleSupplier supplier) {
        return __$a.orElseGet(this, supplier);
    }

    public double orElseThrow() {
        return __$a.orElseThrow(this);
    }

    public <X extends java.lang.Throwable> double orElseThrow(Supplier<? extends X> exceptionSupplier) throws X {
        return __$a.orElseThrow(this, exceptionSupplier);
    }

    public DoubleStream stream() {
        return __$a.stream(this);
    }

    @Override
    public String toString() {
        return __$a.toString(this);
    }
}
