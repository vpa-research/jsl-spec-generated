// Generated by the LibSL translator.  DO NOT EDIT!
// source: java\util\OptionalDouble.lsl
//
package ru.spbpu.usvm.overrides.lang.java.java.util;

import java.util.function.DoubleConsumer; // #problem: wraper class name resolution
import java.util.function.DoubleSupplier;
import java.util.function.Supplier;
import java.util.stream.DoubleStream;
import ru.spbpu.usvm.api.EngineInterfacing;
import ru.spbpu.usvm.api.LibSLRuntime;
import ru.spbpu.usvm.overrides.lang.java.java.util.OptionalDouble;

public final class OptionalDoubleAutomaton implements LibSLRuntime.Automaton {
    public __$lsl_States __$lsl_state = __$lsl_States.Allocated;

    private double value = 0.0d;

    private boolean present = false;

    @LibSLRuntime.AutomatonConstructor
    public OptionalDoubleAutomaton(__$lsl_States __$lsl_state, double value, boolean present) {
        this.__$lsl_state = __$lsl_state;
        this.value = value;
        this.present = present;
    }

    @LibSLRuntime.AutomatonConstructor
    public OptionalDoubleAutomaton() {
        this(__$lsl_States.Allocated, 0.0d, false);
    }

    public void OptionalDouble(OptionalDouble self) { // #warning: this is a constructor
        if (this.__$lsl_state != __$lsl_States.Allocated) {
            LibSLRuntime.automatonStateCheckViolation();
        }
        LibSLRuntime.error("Private constructor call");
        this.__$lsl_state = __$lsl_States.Initialized;
    }

    public void OptionalDouble(OptionalDouble self, double x) {
        if (this.__$lsl_state != __$lsl_States.Allocated) {
            LibSLRuntime.automatonStateCheckViolation();
        }
        LibSLRuntime.error("Private constructor call");
        this.__$lsl_state = __$lsl_States.Initialized;
    }

    public static OptionalDouble _makeEmpty() {
        OptionalDouble result;
        result = new OptionalDouble(new OptionalDoubleAutomaton(OptionalDoubleAutomaton.__$lsl_States.Initialized, 0.0d, false));
        return result;
    }

    public static void _throwNPE() {
        throw new java.lang.NullPointerException();
    }

    public static OptionalDouble empty() {
        OptionalDouble result;
        // WARNING: no state checks in static context
        result = _makeEmpty();
        // WARNING: no state transitions in static context
        return result;
    }

    public static OptionalDouble of(double x) {
        OptionalDouble result;
        // WARNING: no state checks in static context
        result = new OptionalDouble(new OptionalDoubleAutomaton(OptionalDoubleAutomaton.__$lsl_States.Initialized, x, true));
        // WARNING: no state transitions in static context
        return result;
    }

    public boolean equals(OptionalDouble self, Object other) {
        boolean result;
        if (this.__$lsl_state != __$lsl_States.Initialized) {
            LibSLRuntime.automatonStateCheckViolation();
        }
        if (self == other) {
            result = true;
        } else {
            final boolean isSameType = EngineInterfacing.isSameType(self, other);
            if (isSameType) {
                final double otherValue = ((OptionalDoubleAutomaton) ((LibSLRuntime.HasAutomaton) other).getAutomaton()).value;
                final boolean otherPresent = ((OptionalDoubleAutomaton) ((LibSLRuntime.HasAutomaton) other).getAutomaton()).present;
                if (self.present && otherPresent) {
                    result = self.value == otherValue;
                } else {
                    result = self.present == otherPresent;
                }
            } else {
                result = false;
            }
        }
        return result;
    }

    public double getAsDouble(OptionalDouble self) {
        double result;
        if (this.__$lsl_state != __$lsl_States.Initialized) {
            LibSLRuntime.automatonStateCheckViolation();
        }
        if (!self.present) {
            throw new java.util.NoSuchElementException("No value present");
        }
        result = self.value;
        return result;
    }

    public int hashCode(OptionalDouble self) {
        int result;
        if (this.__$lsl_state != __$lsl_States.Initialized) {
            LibSLRuntime.automatonStateCheckViolation();
        }
        if (self.present) {
            result = EngineInterfacing.hashCode(self.value);
        } else {
            result = 0;
        }
        return result;
    }

    public void ifPresent(OptionalDouble self, DoubleConsumer consumer) {
        if (this.__$lsl_state != __$lsl_States.Initialized) {
            LibSLRuntime.automatonStateCheckViolation();
        }
        if (self.present) {
            if (consumer == null) {
                throw new java.lang.NullPointerException();
            }
            consumer.accept(self.value);
        }
    }

    public void ifPresentOrElse(OptionalDouble self, DoubleConsumer consumer, Runnable emptyAction) {
        if (this.__$lsl_state != __$lsl_States.Initialized) {
            LibSLRuntime.automatonStateCheckViolation();
        }
        if (self.present) {
            if (consumer == null) {
                throw new java.lang.NullPointerException();
            }
            consumer.accept(self.value);
        } else {
            if (emptyAction == null) {
                throw new java.lang.NullPointerException();
            }
            emptyAction.run();
        }
    }

    public boolean isEmpty(OptionalDouble self) {
        boolean result;
        if (this.__$lsl_state != __$lsl_States.Initialized) {
            LibSLRuntime.automatonStateCheckViolation();
        }
        result = !self.present;
        return result;
    }

    public boolean isPresent(OptionalDouble self) {
        boolean result;
        if (this.__$lsl_state != __$lsl_States.Initialized) {
            LibSLRuntime.automatonStateCheckViolation();
        }
        result = self.present;
        return result;
    }

    public double orElse(OptionalDouble self, double other) {
        double result;
        if (this.__$lsl_state != __$lsl_States.Initialized) {
            LibSLRuntime.automatonStateCheckViolation();
        }
        if (self.present) {
            result = self.value;
        } else {
            result = other;
        }
        return result;
    }

    public double orElseGet(OptionalDouble self, DoubleSupplier supplier) {
        double result;
        if (this.__$lsl_state != __$lsl_States.Initialized) {
            LibSLRuntime.automatonStateCheckViolation();
        }
        if (supplier == null) {
            throw new java.lang.NullPointerException();
        }
        if (self.present) {
            result = self.value;
        } else {
            result = supplier.get();
        }
        return result;
    }

    public double orElseThrow(OptionalDouble self) {
        double result;
        if (this.__$lsl_state != __$lsl_States.Initialized) {
            LibSLRuntime.automatonStateCheckViolation();
        }
        if (!self.present) {
            throw new java.util.NoSuchElementException("No value present");
        }
        result = self.value;
        return result;
    }

    public <X extends java.lang.Throwable> double orElseThrow(OptionalDouble self, Supplier<X> exceptionSupplier) throws X {
        double result;
        if (this.__$lsl_state != __$lsl_States.Initialized) {
            LibSLRuntime.automatonStateCheckViolation();
        }
        if (exceptionSupplier == null) {
            throw new java.lang.NullPointerException();
        }
        if (!self.present) {
            final Object exception = exceptionSupplier.get();
            throw ((Throwable) exception);
        } else {
            result = self.value;
        }
        return result;
    }

    public DoubleStream stream(OptionalDouble self) {
        DoubleStream result;
        if (this.__$lsl_state != __$lsl_States.Initialized) {
            LibSLRuntime.automatonStateCheckViolation();
        }
        LibSLRuntime.not_implemented();
        return result;
    }

    public String toString(OptionalDouble self) {
        String result;
        if (this.__$lsl_state != __$lsl_States.Initialized) {
            LibSLRuntime.automatonStateCheckViolation();
        }
        if (self.present) {
            final String valueStr = EngineInterfacing.toString(self.value);
            result = "OptionalDouble[" + valueStr + "]";
        } else {
            result = "OptionalDouble.empty";
        }
        return result;
    }

    public enum __$lsl_States {
        Allocated,

        Initialized
    }
}
