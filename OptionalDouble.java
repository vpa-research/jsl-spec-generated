// Generated by the LibSL translator.  DO NOT EDIT!
// source: java/util/OptionalDouble.lsl
//
package com.example.helloworld;

import static ru.spbpu.usvm.api.EngineInterfacing.*;

import ???.AutomatonConstructor;
import java.util.function.DoubleConsumer;
import java.util.function.DoubleSupplier;
import java.util.function.Supplier;
import java.util.stream.DoubleStream;

public final class OptionalDouble {
    private double value = 0d;

    private boolean present = false;

    private OptionalDouble() {
        this.__$libsl_state = __$libsl_States.Allocated;
        this.__$libsl_parent = null;
        if (this.__$libsl_state != __$libsl_States.Allocated) {
            throw new java.lang.RuntimeException();
        }
        {
            throw new java.lang.RuntimeException("Private constructor call");
        }
        if (this.__$libsl_state == __$libsl_States.Allocated) this.__$libsl_state = __$libsl_States.Initialized;
    }

    private OptionalDouble(double x) {
        this.__$libsl_state = __$libsl_States.Allocated;
        this.__$libsl_parent = null;
        if (this.__$libsl_state != __$libsl_States.Allocated) {
            throw new java.lang.RuntimeException();
        }
        {
            throw new java.lang.RuntimeException("Private constructor call");
        }
        if (this.__$libsl_state == __$libsl_States.Allocated) this.__$libsl_state = __$libsl_States.Initialized;
    }

    @AutomatonConstructor
    public OptionalDouble(__$libsl_States __$libsl_state, Object __$libsl_parent, double value,
            boolean present) {
        this.__$libsl_state = __$libsl_state;
        this.__$libsl_parent = __$libsl_parent;
        this.value = value;
        this.present = present;
    }

    public static OptionalDouble _makeEmpty() {
        OptionalDouble result;
        {
            result = new com.example.helloworld.OptionalDouble(
                    com.example.helloworld.OptionalDouble.__$libsl_States.Initialized,
                    null,
                    0d,
                    false);
        }
        return result;
    }

    public void _throwNPE() {
        {
            throw new java.lang.NullPointerException();
        }
    }

    public static OptionalDouble empty() {
        OptionalDouble result;
        if (this.__$libsl_state != __$libsl_States.Allocated) {
            throw new java.lang.RuntimeException();
        }
        {
            result = _makeEmpty();
        }
        if (this.__$libsl_state == __$libsl_States.Allocated) this.__$libsl_state = __$libsl_States.Initialized;
        return result;
    }

    public static OptionalDouble of(double x) {
        OptionalDouble result;
        if (this.__$libsl_state != __$libsl_States.Allocated) {
            throw new java.lang.RuntimeException();
        }
        {
            result = new com.example.helloworld.OptionalDouble(
                    com.example.helloworld.OptionalDouble.__$libsl_States.Initialized,
                    null,
                    x,
                    true);
        }
        if (this.__$libsl_state == __$libsl_States.Allocated) this.__$libsl_state = __$libsl_States.Initialized;
        return result;
    }

    public boolean equals(Object other) {
        boolean result;
        if (this.__$libsl_state != __$libsl_States.Initialized) {
            throw new java.lang.RuntimeException();
        }
        {
            if (other == this) result = true;
            else {
                final boolean isSameType = usvmIsSameType(this, other);
                if (isSameType) {
                    final double otherValue = ((OptionalDouble) other).value;
                    final boolean otherPresent = ((OptionalDouble) other).present;
                    if (this.present && otherPresent) result = this.value == otherValue;
                    else result = this.present == otherPresent;
                }
                else result = false;
            }
        }
        return result;
    }

    public double getAsDouble() {
        double result;
        if (this.__$libsl_state != __$libsl_States.Initialized) {
            throw new java.lang.RuntimeException();
        }
        {
            if (!this.present) throw new java.util.NoSuchElementException("No value present");
            result = this.value;
        }
        return result;
    }

    public int hashCode() {
        int result;
        if (this.__$libsl_state != __$libsl_States.Initialized) {
            throw new java.lang.RuntimeException();
        }
        {
            if (this.present) result = usvmHashCode(this.value);
            else result = 0;
        }
        return result;
    }

    public void ifPresent(DoubleConsumer consumer) {
        if (this.__$libsl_state != __$libsl_States.Initialized) {
            throw new java.lang.RuntimeException();
        }
        {
            if (this.present) {
                if (consumer == null) throw new java.lang.NullPointerException();
                <TODO: call interface {consumer}>;
            }
        }
    }

    public void ifPresentOrElse(DoubleConsumer consumer, Runnable emptyAction) {
        if (this.__$libsl_state != __$libsl_States.Initialized) {
            throw new java.lang.RuntimeException();
        }
        {
            if (this.present) {
                if (consumer == null) throw new java.lang.NullPointerException();
                <TODO: call interface {consumer}>;
            }
            else {
                if (emptyAction == null) throw new java.lang.NullPointerException();
                <TODO: call interface {emptyAction}>;
            }
        }
    }

    public boolean isEmpty() {
        boolean result;
        if (this.__$libsl_state != __$libsl_States.Initialized) {
            throw new java.lang.RuntimeException();
        }
        {
            result = !this.present;
        }
        return result;
    }

    public boolean isPresent() {
        boolean result;
        if (this.__$libsl_state != __$libsl_States.Initialized) {
            throw new java.lang.RuntimeException();
        }
        {
            result = this.present;
        }
        return result;
    }

    public double orElse(double other) {
        double result;
        if (this.__$libsl_state != __$libsl_States.Initialized) {
            throw new java.lang.RuntimeException();
        }
        {
            if (this.present) result = this.value;
            else result = other;
        }
        return result;
    }

    public double orElseGet(DoubleSupplier supplier) {
        double result;
        if (this.__$libsl_state != __$libsl_States.Initialized) {
            throw new java.lang.RuntimeException();
        }
        {
            if (supplier == null) throw new java.lang.NullPointerException();
            if (this.present) result = this.value;
            else result = <TODO: call interface {supplier}>;
        }
        return result;
    }

    public double orElseThrow() {
        double result;
        if (this.__$libsl_state != __$libsl_States.Initialized) {
            throw new java.lang.RuntimeException();
        }
        {
            if (!this.present) throw new java.util.NoSuchElementException("No value present");
            result = this.value;
        }
        return result;
    }

    public double orElseThrow(Supplier<? extends Q> exceptionSupplier) {
        double result;
        if (this.__$libsl_state != __$libsl_States.Initialized) {
            throw new java.lang.RuntimeException();
        }
        {
            if (exceptionSupplier == null) throw new java.lang.NullPointerException();
            if (!this.present) {
                final Object exception = <TODO: call interface {exceptionSupplier}>;
                throw ((Throwable) exception);
            }
            else result = this.value;
        }
        return result;
    }

    public DoubleStream stream() {
        DoubleStream result;
        if (this.__$libsl_state != __$libsl_States.Initialized) {
            throw new java.lang.RuntimeException();
        }
        {
            throw new java.lang.RuntimeException("NOT_IMPLEMENTED");
        }
        return result;
    }

    public String toString() {
        String result;
        if (this.__$libsl_state != __$libsl_States.Initialized) {
            throw new java.lang.RuntimeException();
        }
        {
            if (this.present) {
                final String valueStr = usvmToString(this.value);
                result = "OptionalDouble[" + valueStr + "]";
            }
            else result = "OptionalDouble.empty";
        }
        return result;
    }

    public enum __$libsl_States {
        Initialized,

        Allocated
    }
}
